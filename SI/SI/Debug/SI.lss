
SI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000ff0  00001084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800132  00800132  000010b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c59  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080b  00000000  00000000  00002f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000968  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  000040f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a8  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002093  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_18>
  4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	63 7c       	andi	r22, 0xC3	; 195
  6a:	77 7b       	andi	r23, 0xB7	; 183
  6c:	f2 6b       	ori	r31, 0xB2	; 178
  6e:	6f c5       	rjmp	.+2782   	; 0xb4e <vfprintf+0xcc>
  70:	30 01       	movw	r6, r0
  72:	67 2b       	or	r22, r23
  74:	fe d7       	rcall	.+4092   	; 0x1072 <__data_load_end+0x50>
  76:	ab 76       	andi	r26, 0x6B	; 107
  78:	ca 82       	std	Y+2, r12	; 0x02
  7a:	c9 7d       	andi	r28, 0xD9	; 217
  7c:	fa 59       	subi	r31, 0x9A	; 154
  7e:	47 f0       	brie	.+16     	; 0x90 <__trampolines_end+0x28>
  80:	ad d4       	rcall	.+2394   	; 0x9dc <USART_Init+0x1a>
  82:	a2 af       	std	Z+58, r26	; 0x3a
  84:	9c a4       	ldd	r9, Y+44	; 0x2c
  86:	72 c0       	rjmp	.+228    	; 0x16c <__ctors_end+0x4>
  88:	b7 fd       	sbrc	r27, 7
  8a:	93 26       	eor	r9, r19
  8c:	36 3f       	cpi	r19, 0xF6	; 246
  8e:	f7 cc       	rjmp	.-1554   	; 0xfffffa7e <__eeprom_end+0xff7efa7e>
  90:	34 a5       	ldd	r19, Z+44	; 0x2c
  92:	e5 f1       	brhs	.+120    	; 0x10c <__trampolines_end+0xa4>
  94:	71 d8       	rcall	.-3870   	; 0xfffff178 <__eeprom_end+0xff7ef178>
  96:	31 15       	cp	r19, r1
  98:	04 c7       	rjmp	.+3592   	; 0xea2 <fputc+0x50>
  9a:	23 c3       	rjmp	.+1606   	; 0x6e2 <aes_expandEncKey+0x1d0>
  9c:	18 96       	adiw	r26, 0x08	; 8
  9e:	05 9a       	sbi	0x00, 5	; 0
  a0:	07 12       	cpse	r0, r23
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	eb 27       	eor	r30, r27
  a6:	b2 75       	andi	r27, 0x52	; 82
  a8:	09 83       	std	Y+1, r16	; 0x01
  aa:	2c 1a       	sub	r2, r28
  ac:	1b 6e       	ori	r17, 0xEB	; 235
  ae:	5a a0       	ldd	r5, Y+34	; 0x22
  b0:	52 3b       	cpi	r21, 0xB2	; 178
  b2:	d6 b3       	in	r29, 0x16	; 22
  b4:	29 e3       	ldi	r18, 0x39	; 57
  b6:	2f 84       	ldd	r2, Y+15	; 0x0f
  b8:	53 d1       	rcall	.+678    	; 0x360 <rj_xtime+0x2>
  ba:	00 ed       	ldi	r16, 0xD0	; 208
  bc:	20 fc       	sbrc	r2, 0
  be:	b1 5b       	subi	r27, 0xB1	; 177
  c0:	6a cb       	rjmp	.-2348   	; 0xfffff796 <__eeprom_end+0xff7ef796>
  c2:	be 39       	cpi	r27, 0x9E	; 158
  c4:	4a 4c       	sbci	r20, 0xCA	; 202
  c6:	58 cf       	rjmp	.-336    	; 0xffffff78 <__eeprom_end+0xff7eff78>
  c8:	d0 ef       	ldi	r29, 0xF0	; 240
  ca:	aa fb       	.word	0xfbaa	; ????
  cc:	43 4d       	sbci	r20, 0xD3	; 211
  ce:	33 85       	ldd	r19, Z+11	; 0x0b
  d0:	45 f9       	bld	r20, 5
  d2:	02 7f       	andi	r16, 0xF2	; 242
  d4:	50 3c       	cpi	r21, 0xC0	; 192
  d6:	9f a8       	ldd	r9, Y+55	; 0x37
  d8:	51 a3       	std	Z+33, r21	; 0x21
  da:	40 8f       	std	Z+24, r20	; 0x18
  dc:	92 9d       	mul	r25, r2
  de:	38 f5       	brcc	.+78     	; 0x12e <__trampolines_end+0xc6>
  e0:	bc b6       	in	r11, 0x3c	; 60
  e2:	da 21       	and	r29, r10
  e4:	10 ff       	sbrs	r17, 0
  e6:	f3 d2       	rcall	.+1510   	; 0x6ce <aes_expandEncKey+0x1bc>
  e8:	cd 0c       	add	r12, r13
  ea:	13 ec       	ldi	r17, 0xC3	; 195
  ec:	5f 97       	sbiw	r26, 0x1f	; 31
  ee:	44 17       	cp	r20, r20
  f0:	c4 a7       	std	Z+44, r28	; 0x2c
  f2:	7e 3d       	cpi	r23, 0xDE	; 222
  f4:	64 5d       	subi	r22, 0xD4	; 212
  f6:	19 73       	andi	r17, 0x39	; 57
  f8:	60 81       	ld	r22, Z
  fa:	4f dc       	rcall	.-1890   	; 0xfffff99a <__eeprom_end+0xff7ef99a>
  fc:	22 2a       	or	r2, r18
  fe:	90 88       	ldd	r9, Z+16	; 0x10
 100:	46 ee       	ldi	r20, 0xE6	; 230
 102:	b8 14       	cp	r11, r8
 104:	de 5e       	subi	r29, 0xEE	; 238
 106:	0b db       	rcall	.-2538   	; 0xfffff71e <__eeprom_end+0xff7ef71e>
 108:	e0 32       	cpi	r30, 0x20	; 32
 10a:	3a 0a       	sbc	r3, r26
 10c:	49 06       	cpc	r4, r25
 10e:	24 5c       	subi	r18, 0xC4	; 196
 110:	c2 d3       	rcall	.+1924   	; 0x896 <ReadADC+0x28>
 112:	ac 62       	ori	r26, 0x2C	; 44
 114:	91 95       	neg	r25
 116:	e4 79       	andi	r30, 0x94	; 148
 118:	e7 c8       	rjmp	.-3634   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
 11a:	37 6d       	ori	r19, 0xD7	; 215
 11c:	8d d5       	rcall	.+2842   	; 0xc38 <vfprintf+0x1b6>
 11e:	4e a9       	ldd	r20, Y+54	; 0x36
 120:	6c 56       	subi	r22, 0x6C	; 108
 122:	f4 ea       	ldi	r31, 0xA4	; 164
 124:	65 7a       	andi	r22, 0xA5	; 165
 126:	ae 08       	sbc	r10, r14
 128:	ba 78       	andi	r27, 0x8A	; 138
 12a:	25 2e       	mov	r2, r21
 12c:	1c a6       	std	Y+44, r1	; 0x2c
 12e:	b4 c6       	rjmp	.+3432   	; 0xe98 <fputc+0x46>
 130:	e8 dd       	rcall	.-1072   	; 0xfffffd02 <__eeprom_end+0xff7efd02>
 132:	74 1f       	adc	r23, r20
 134:	4b bd       	out	0x2b, r20	; 43
 136:	8b 8a       	std	Y+19, r8	; 0x13
 138:	70 3e       	cpi	r23, 0xE0	; 224
 13a:	b5 66       	ori	r27, 0x65	; 101
 13c:	48 03       	fmul	r20, r16
 13e:	f6 0e       	add	r15, r22
 140:	61 35       	cpi	r22, 0x51	; 81
 142:	57 b9       	out	0x07, r21	; 7
 144:	86 c1       	rjmp	.+780    	; 0x452 <aes_mixColumns+0x22>
 146:	1d 9e       	mul	r1, r29
 148:	e1 f8       	bld	r14, 1
 14a:	98 11       	cpse	r25, r8
 14c:	69 d9       	rcall	.-3374   	; 0xfffff420 <__eeprom_end+0xff7ef420>
 14e:	8e 94 9b 1e 	call	0x203d36	; 0x203d36 <__data_load_end+0x202d14>
 152:	87 e9       	ldi	r24, 0x97	; 151
 154:	ce 55       	subi	r28, 0x5E	; 94
 156:	28 df       	rcall	.-432    	; 0xffffffa8 <__eeprom_end+0xff7effa8>
 158:	8c a1       	ldd	r24, Y+36	; 0x24
 15a:	89 0d       	add	r24, r9
 15c:	bf e6       	ldi	r27, 0x6F	; 111
 15e:	42 68       	ori	r20, 0x82	; 130
 160:	41 99       	sbic	0x08, 1	; 8
 162:	2d 0f       	add	r18, r29
 164:	b0 54       	subi	r27, 0x40	; 64
 166:	bb 16       	cp	r11, r27

00000168 <__ctors_end>:
 168:	11 24       	eor	r1, r1
 16a:	1f be       	out	0x3f, r1	; 63
 16c:	cf ef       	ldi	r28, 0xFF	; 255
 16e:	d8 e0       	ldi	r29, 0x08	; 8
 170:	de bf       	out	0x3e, r29	; 62
 172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	e0 ef       	ldi	r30, 0xF0	; 240
 17c:	ff e0       	ldi	r31, 0x0F	; 15
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
 180:	05 90       	lpm	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	a2 33       	cpi	r26, 0x32	; 50
 186:	b1 07       	cpc	r27, r17
 188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	a2 e3       	ldi	r26, 0x32	; 50
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a3 34       	cpi	r26, 0x43	; 67
 196:	b2 07       	cpc	r27, r18
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	0e 94 17 04 	call	0x82e	; 0x82e <main>
 19e:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_exit>

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <aesXorVectors>:
*   \param  dest - destination of xor
*   \param  src - source of xor data
*   \param  nbytes - number of bytes to be xored between dest and src
*/
void aesXorVectors(uint8_t *dest, const uint8_t *src, uint8_t nbytes)
{
 1a6:	fc 01       	movw	r30, r24
    while (nbytes--)
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	24 0f       	add	r18, r20
 1ac:	44 23       	and	r20, r20
 1ae:	41 f0       	breq	.+16     	; 0x1c0 <aesXorVectors+0x1a>
 1b0:	a6 2f       	mov	r26, r22
 1b2:	b7 2f       	mov	r27, r23
    {
        *dest ^= *src;
 1b4:	9d 91       	ld	r25, X+
 1b6:	80 81       	ld	r24, Z
 1b8:	98 27       	eor	r25, r24
 1ba:	91 93       	st	Z+, r25
*   \param  src - source of xor data
*   \param  nbytes - number of bytes to be xored between dest and src
*/
void aesXorVectors(uint8_t *dest, const uint8_t *src, uint8_t nbytes)
{
    while (nbytes--)
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	d0 f7       	brcc	.-12     	; 0x1b4 <aesXorVectors+0xe>
 1c0:	08 95       	ret

000001c2 <aes256CtrSetIv>:
*   \param  ctx - context
*   \param  iv - pointer to initialization vector, size must be 16 bytes or lower.
*   \param  ivLen - length of initialization vector, must be 16 or lower.
*/
void aes256CtrSetIv(aes256CtrCtx_t *ctx, const uint8_t *iv, uint8_t ivLen)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	uint8_t i;

	// ivLen must be 16 or lower
	if (ivLen > 16)
 1c8:	41 31       	cpi	r20, 0x11	; 17
 1ca:	08 f5       	brcc	.+66     	; 0x20e <aes256CtrSetIv+0x4c>
	{
		return;
	}

	// copy iv inside CTX
	for (i=0; i<ivLen; i++)
 1cc:	44 23       	and	r20, r20
 1ce:	99 f0       	breq	.+38     	; 0x1f6 <aes256CtrSetIv+0x34>
 1d0:	a6 2f       	mov	r26, r22
 1d2:	b7 2f       	mov	r27, r23
 1d4:	fc 01       	movw	r30, r24
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	24 0f       	add	r18, r20
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	2f 59       	subi	r18, 0x9F	; 159
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	28 0f       	add	r18, r24
 1e6:	39 1f       	adc	r19, r25
	{
		ctx->ctr[i] = iv[i];
 1e8:	9d 91       	ld	r25, X+
 1ea:	91 93       	st	Z+, r25
	{
		return;
	}

	// copy iv inside CTX
	for (i=0; i<ivLen; i++)
 1ec:	e2 17       	cp	r30, r18
 1ee:	f3 07       	cpc	r31, r19
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <aes256CtrSetIv+0x26>
	{
		ctx->ctr[i] = iv[i];
	}

	// zero rest of bytes of ctx->iv.
	for (i = ivLen; i < 16; i++)
 1f2:	40 31       	cpi	r20, 0x10	; 16
 1f4:	48 f4       	brcc	.+18     	; 0x208 <aes256CtrSetIv+0x46>
	{
		ctx->ctr[i] = 0x00;
 1f6:	fe 01       	movw	r30, r28
 1f8:	e4 0f       	add	r30, r20
 1fa:	f1 1d       	adc	r31, r1
 1fc:	e0 5a       	subi	r30, 0xA0	; 160
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	10 82       	st	Z, r1
	{
		ctx->ctr[i] = iv[i];
	}

	// zero rest of bytes of ctx->iv.
	for (i = ivLen; i < 16; i++)
 202:	4f 5f       	subi	r20, 0xFF	; 255
 204:	40 31       	cpi	r20, 0x10	; 16
 206:	b8 f3       	brcs	.-18     	; 0x1f6 <aes256CtrSetIv+0x34>
	{
		ctx->ctr[i] = 0x00;
	}

	// invalidate cipherstream cache
	ctx->cipherstreamAvailable = 0;
 208:	c0 58       	subi	r28, 0x80	; 128
 20a:	df 4f       	sbci	r29, 0xFF	; 255
 20c:	18 82       	st	Y, r1
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <aes256CtrInit>:
*   \param  key - pointer to key, size must be 32 bytes
*   \param  iv - pointer to initialization vector, must be 16 or lower.
*   \param  ivLen - length of initialization vector, must be 16 or lower.
*/
void aes256CtrInit(aes256CtrCtx_t *ctx, const uint8_t *key, const uint8_t *iv, uint8_t ivLen)
{
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
	// ivLen must be 16 or lower
	if (ivLen > 16)
 21e:	21 31       	cpi	r18, 0x11	; 17
 220:	50 f4       	brcc	.+20     	; 0x236 <aes256CtrInit+0x22>
 222:	c2 2f       	mov	r28, r18
 224:	7a 01       	movw	r14, r20
 226:	8c 01       	movw	r16, r24
	{
		return;
	}

	// initialize key schedule inside CTX
	aes256_init(key, &(ctx->aesCtx));
 228:	0e 94 84 03 	call	0x708	; 0x708 <aes256_init_ecb>

	// initialize iv and cipherstream cache
	aes256CtrSetIv(ctx, iv, ivLen);
 22c:	4c 2f       	mov	r20, r28
 22e:	b7 01       	movw	r22, r14
 230:	c8 01       	movw	r24, r16
 232:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <aes256CtrSetIv>
}
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <aesIncrementCtr>:
*
*   \param  ctr - pointer to counter+iv, size must be len bytes
*   \param  len - the size of the ctr buffer to be incremented
*/
void aesIncrementCtr(uint8_t *ctr, uint8_t len)
{
 242:	ac 01       	movw	r20, r24
    uint8_t i;

    if (len == 0)
 244:	66 23       	and	r22, r22
 246:	c9 f0       	breq	.+50     	; 0x27a <aesIncrementCtr+0x38>
    {
        return;
    }

    i = len-1;
 248:	61 50       	subi	r22, 0x01	; 1
    while (ctr[i]++ == 0xFF)
 24a:	fc 01       	movw	r30, r24
 24c:	e6 0f       	add	r30, r22
 24e:	f1 1d       	adc	r31, r1
 250:	80 81       	ld	r24, Z
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	98 0f       	add	r25, r24
 256:	90 83       	st	Z, r25
 258:	8f 3f       	cpi	r24, 0xFF	; 255
 25a:	79 f4       	brne	.+30     	; 0x27a <aesIncrementCtr+0x38>
    {
        if (i == 0)
 25c:	61 11       	cpse	r22, r1
 25e:	03 c0       	rjmp	.+6      	; 0x266 <aesIncrementCtr+0x24>
 260:	08 95       	ret
 262:	66 23       	and	r22, r22
 264:	51 f0       	breq	.+20     	; 0x27a <aesIncrementCtr+0x38>
        {
            break;
        }

        i--;
 266:	61 50       	subi	r22, 0x01	; 1
    {
        return;
    }

    i = len-1;
    while (ctr[i]++ == 0xFF)
 268:	fa 01       	movw	r30, r20
 26a:	e6 0f       	add	r30, r22
 26c:	f1 1d       	adc	r31, r1
 26e:	90 81       	ld	r25, Z
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	29 0f       	add	r18, r25
 274:	20 83       	st	Z, r18
 276:	9f 3f       	cpi	r25, 0xFF	; 255
 278:	a1 f3       	breq	.-24     	; 0x262 <aesIncrementCtr+0x20>
 27a:	08 95       	ret

0000027c <aes256CtrEncrypt>:
*   \param  ctx - context
*   \param  data - pointer to data, this is also the location to store encrypted data
*   \param  dataLen - size of data
*/
void aes256CtrEncrypt(aes256CtrCtx_t *ctx, uint8_t *data, uint16_t dataLen)
{
 27c:	2f 92       	push	r2
 27e:	3f 92       	push	r3
 280:	4f 92       	push	r4
 282:	5f 92       	push	r5
 284:	6f 92       	push	r6
 286:	7f 92       	push	r7
 288:	8f 92       	push	r8
 28a:	9f 92       	push	r9
 28c:	af 92       	push	r10
 28e:	bf 92       	push	r11
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
    uint16_t i;

    // Loop will advance by a variable amount: ctx->cipherstreamAvailable in the
    // first round, 16 then, dataLen - i in the last round.
    for (i = 0; i < dataLen; )
 2a0:	41 15       	cp	r20, r1
 2a2:	51 05       	cpc	r21, r1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <aes256CtrEncrypt+0x2c>
 2a6:	48 c0       	rjmp	.+144    	; 0x338 <aes256CtrEncrypt+0xbc>
 2a8:	7a 01       	movw	r14, r20
 2aa:	3b 01       	movw	r6, r22
 2ac:	6c 01       	movw	r12, r24
 2ae:	81 2c       	mov	r8, r1
 2b0:	91 2c       	mov	r9, r1
    {
        // if we need new cipherstream, calculate it
        if (ctx->cipherstreamAvailable == 0)
 2b2:	ec 01       	movw	r28, r24
 2b4:	c0 58       	subi	r28, 0x80	; 128
 2b6:	df 4f       	sbci	r29, 0xFF	; 255
 2b8:	1c 01       	movw	r2, r24
 2ba:	80 e6       	ldi	r24, 0x60	; 96
 2bc:	28 0e       	add	r2, r24
 2be:	31 1c       	adc	r3, r1
 2c0:	26 01       	movw	r4, r12
 2c2:	80 e7       	ldi	r24, 0x70	; 112
 2c4:	48 0e       	add	r4, r24
 2c6:	51 1c       	adc	r5, r1
        {
            thisLoop = ctx->cipherstreamAvailable;
        }

        // do the actual encryption/decryption, update state
        aesXorVectors(data + i, ctx->cipherstream + 16 - ctx->cipherstreamAvailable, thisLoop);
 2c8:	68 94       	set
 2ca:	aa 24       	eor	r10, r10
 2cc:	a4 f8       	bld	r10, 4
 2ce:	b1 2c       	mov	r11, r1
    // Loop will advance by a variable amount: ctx->cipherstreamAvailable in the
    // first round, 16 then, dataLen - i in the last round.
    for (i = 0; i < dataLen; )
    {
        // if we need new cipherstream, calculate it
        if (ctx->cipherstreamAvailable == 0)
 2d0:	88 81       	ld	r24, Y
 2d2:	81 11       	cpse	r24, r1
 2d4:	0d c0       	rjmp	.+26     	; 0x2f0 <aes256CtrEncrypt+0x74>
 2d6:	d1 01       	movw	r26, r2
 2d8:	f2 01       	movw	r30, r4
        {
            uint8_t j;
            for(j = 0; j < 16; j++)
            {
                ctx->cipherstream[j] = ctx->ctr[j];
 2da:	8d 91       	ld	r24, X+
 2dc:	81 93       	st	Z+, r24
    {
        // if we need new cipherstream, calculate it
        if (ctx->cipherstreamAvailable == 0)
        {
            uint8_t j;
            for(j = 0; j < 16; j++)
 2de:	ec 17       	cp	r30, r28
 2e0:	fd 07       	cpc	r31, r29
 2e2:	d9 f7       	brne	.-10     	; 0x2da <aes256CtrEncrypt+0x5e>
            {
                ctx->cipherstream[j] = ctx->ctr[j];
            }

            // encrypt ctr with key, then store the result in cipherstream
            aes256_enc(ctx->cipherstream, &(ctx->aesCtx));
 2e4:	b2 01       	movw	r22, r4
 2e6:	c6 01       	movw	r24, r12
 2e8:	0e 94 b9 03 	call	0x772	; 0x772 <aes256_encrypt_ecb>

            ctx->cipherstreamAvailable = 16;
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	88 83       	st	Y, r24
        }

        uint16_t thisLoop = dataLen - i;

        // in this go we can only do at most cipherStreamAvailable bytes
        if (thisLoop > ctx->cipherstreamAvailable)
 2f0:	88 81       	ld	r24, Y
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	87 01       	movw	r16, r14
 2f6:	08 19       	sub	r16, r8
 2f8:	19 09       	sbc	r17, r9
 2fa:	80 17       	cp	r24, r16
 2fc:	91 07       	cpc	r25, r17
 2fe:	08 f4       	brcc	.+2      	; 0x302 <aes256CtrEncrypt+0x86>
 300:	8c 01       	movw	r16, r24
        {
            thisLoop = ctx->cipherstreamAvailable;
        }

        // do the actual encryption/decryption, update state
        aesXorVectors(data + i, ctx->cipherstream + 16 - ctx->cipherstreamAvailable, thisLoop);
 302:	b5 01       	movw	r22, r10
 304:	68 1b       	sub	r22, r24
 306:	79 0b       	sbc	r23, r25
 308:	60 59       	subi	r22, 0x90	; 144
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	6c 0d       	add	r22, r12
 30e:	7d 1d       	adc	r23, r13
 310:	40 2f       	mov	r20, r16
 312:	c3 01       	movw	r24, r6
 314:	88 0d       	add	r24, r8
 316:	99 1d       	adc	r25, r9
 318:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <aesXorVectors>
        i += thisLoop;
 31c:	80 0e       	add	r8, r16
 31e:	91 1e       	adc	r9, r17
        ctx->cipherstreamAvailable -= thisLoop;
 320:	88 81       	ld	r24, Y
 322:	80 1b       	sub	r24, r16
 324:	88 83       	st	Y, r24

        // if the cached cipherstream is fully used, increment ctr
        if (ctx->cipherstreamAvailable == 0)
 326:	81 11       	cpse	r24, r1
 328:	04 c0       	rjmp	.+8      	; 0x332 <aes256CtrEncrypt+0xb6>
        {
            aesIncrementCtr(ctx->ctr, 16);
 32a:	60 e1       	ldi	r22, 0x10	; 16
 32c:	c1 01       	movw	r24, r2
 32e:	0e 94 21 01 	call	0x242	; 0x242 <aesIncrementCtr>
{
    uint16_t i;

    // Loop will advance by a variable amount: ctx->cipherstreamAvailable in the
    // first round, 16 then, dataLen - i in the last round.
    for (i = 0; i < dataLen; )
 332:	8e 14       	cp	r8, r14
 334:	9f 04       	cpc	r9, r15
 336:	60 f2       	brcs	.-104    	; 0x2d0 <aes256CtrEncrypt+0x54>
        if (ctx->cipherstreamAvailable == 0)
        {
            aesIncrementCtr(ctx->ctr, 16);
        }
    }
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	7f 90       	pop	r7
 352:	6f 90       	pop	r6
 354:	5f 90       	pop	r5
 356:	4f 90       	pop	r4
 358:	3f 90       	pop	r3
 35a:	2f 90       	pop	r2
 35c:	08 95       	ret

0000035e <rj_xtime>:
					#endif

					/* -------------------------------------------------------------------------- */
					uint8_t rj_xtime(uint8_t x)
					{
						return (x & 0x80) ? ((x << 1) ^ 0x1b) : (x << 1);
 35e:	88 23       	and	r24, r24
 360:	24 f4       	brge	.+8      	; 0x36a <rj_xtime+0xc>
 362:	88 0f       	add	r24, r24
 364:	9b e1       	ldi	r25, 0x1B	; 27
 366:	89 27       	eor	r24, r25
 368:	08 95       	ret
 36a:	88 0f       	add	r24, r24
						} /* rj_xtime */
 36c:	08 95       	ret

0000036e <aes_subBytes>:

						/* -------------------------------------------------------------------------- */
						void aes_subBytes(uint8_t *buf)
						{
 36e:	9c 01       	movw	r18, r24
							register uint8_t i = 16;

							while (i--) buf[i] = rj_sbox(buf[i]);
 370:	9f e0       	ldi	r25, 0x0F	; 15
 372:	d9 01       	movw	r26, r18
 374:	a9 0f       	add	r26, r25
 376:	b1 1d       	adc	r27, r1
 378:	ec 91       	ld	r30, X
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	e8 59       	subi	r30, 0x98	; 152
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	e4 91       	lpm	r30, Z
 382:	ec 93       	st	X, r30
 384:	91 50       	subi	r25, 0x01	; 1
 386:	a8 f7       	brcc	.-22     	; 0x372 <aes_subBytes+0x4>
							} /* aes_subBytes */
 388:	08 95       	ret

0000038a <aes_addRoundKey>:
								while (i--) buf[i] = rj_sbox_inv(buf[i]);
								} /* aes_subBytes_inv */

								/* -------------------------------------------------------------------------- */
								void aes_addRoundKey(uint8_t *buf, uint8_t *key)
								{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	dc 01       	movw	r26, r24
									register uint8_t i = 16;

									while (i--) buf[i] ^= key[i];
 390:	9f e0       	ldi	r25, 0x0F	; 15
 392:	29 2f       	mov	r18, r25
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	fd 01       	movw	r30, r26
 398:	e2 0f       	add	r30, r18
 39a:	f3 1f       	adc	r31, r19
 39c:	eb 01       	movw	r28, r22
 39e:	c2 0f       	add	r28, r18
 3a0:	d3 1f       	adc	r29, r19
 3a2:	40 81       	ld	r20, Z
 3a4:	28 81       	ld	r18, Y
 3a6:	24 27       	eor	r18, r20
 3a8:	20 83       	st	Z, r18
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	90 f7       	brcc	.-28     	; 0x392 <aes_addRoundKey+0x8>
									} /* aes_addRoundKey */
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <aes_addRoundKey_cpy>:

									/* -------------------------------------------------------------------------- */
									void aes_addRoundKey_cpy(uint8_t *buf, uint8_t *key, uint8_t *cpk)
									{
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	ec 01       	movw	r28, r24
 3ba:	da 01       	movw	r26, r20
										register uint8_t i = 16;

										while (i--)  buf[i] ^= (cpk[i] = key[i]), cpk[16+i] = key[16 + i];
 3bc:	5f e0       	ldi	r21, 0x0F	; 15
 3be:	25 2f       	mov	r18, r21
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	fb 01       	movw	r30, r22
 3c4:	e2 0f       	add	r30, r18
 3c6:	f3 1f       	adc	r31, r19
 3c8:	90 81       	ld	r25, Z
 3ca:	fd 01       	movw	r30, r26
 3cc:	e2 0f       	add	r30, r18
 3ce:	f3 1f       	adc	r31, r19
 3d0:	90 83       	st	Z, r25
 3d2:	fe 01       	movw	r30, r28
 3d4:	e2 0f       	add	r30, r18
 3d6:	f3 1f       	adc	r31, r19
 3d8:	80 81       	ld	r24, Z
 3da:	98 27       	eor	r25, r24
 3dc:	90 83       	st	Z, r25
 3de:	20 5f       	subi	r18, 0xF0	; 240
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	fb 01       	movw	r30, r22
 3e4:	e2 0f       	add	r30, r18
 3e6:	f3 1f       	adc	r31, r19
 3e8:	80 81       	ld	r24, Z
 3ea:	fd 01       	movw	r30, r26
 3ec:	e2 0f       	add	r30, r18
 3ee:	f3 1f       	adc	r31, r19
 3f0:	80 83       	st	Z, r24
 3f2:	51 50       	subi	r21, 0x01	; 1
 3f4:	20 f7       	brcc	.-56     	; 0x3be <aes_addRoundKey_cpy+0xa>
										} /* aes_addRoundKey_cpy */
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <aes_shiftRows>:


										/* -------------------------------------------------------------------------- */
										void aes_shiftRows(uint8_t *buf)
										{
 3fc:	fc 01       	movw	r30, r24
											register uint8_t i, j; /* to make it potentially parallelable :) */

											i = buf[1]; buf[1] = buf[5]; buf[5] = buf[9]; buf[9] = buf[13]; buf[13] = i;
 3fe:	81 81       	ldd	r24, Z+1	; 0x01
 400:	95 81       	ldd	r25, Z+5	; 0x05
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	91 85       	ldd	r25, Z+9	; 0x09
 406:	95 83       	std	Z+5, r25	; 0x05
 408:	95 85       	ldd	r25, Z+13	; 0x0d
 40a:	91 87       	std	Z+9, r25	; 0x09
 40c:	85 87       	std	Z+13, r24	; 0x0d
											i = buf[10]; buf[10] = buf[2]; buf[2] = i;
 40e:	82 85       	ldd	r24, Z+10	; 0x0a
 410:	92 81       	ldd	r25, Z+2	; 0x02
 412:	92 87       	std	Z+10, r25	; 0x0a
 414:	82 83       	std	Z+2, r24	; 0x02
											j = buf[3]; buf[3] = buf[15]; buf[15] = buf[11]; buf[11] = buf[7]; buf[7] = j;
 416:	83 81       	ldd	r24, Z+3	; 0x03
 418:	97 85       	ldd	r25, Z+15	; 0x0f
 41a:	93 83       	std	Z+3, r25	; 0x03
 41c:	93 85       	ldd	r25, Z+11	; 0x0b
 41e:	97 87       	std	Z+15, r25	; 0x0f
 420:	97 81       	ldd	r25, Z+7	; 0x07
 422:	93 87       	std	Z+11, r25	; 0x0b
 424:	87 83       	std	Z+7, r24	; 0x07
											j = buf[14]; buf[14] = buf[6]; buf[6]  = j;
 426:	86 85       	ldd	r24, Z+14	; 0x0e
 428:	96 81       	ldd	r25, Z+6	; 0x06
 42a:	96 87       	std	Z+14, r25	; 0x0e
 42c:	86 83       	std	Z+6, r24	; 0x06
 42e:	08 95       	ret

00000430 <aes_mixColumns>:

												} /* aes_shiftRows_inv */

												/* -------------------------------------------------------------------------- */
												void aes_mixColumns(uint8_t *buf)
												{
 430:	4f 92       	push	r4
 432:	5f 92       	push	r5
 434:	6f 92       	push	r6
 436:	7f 92       	push	r7
 438:	8f 92       	push	r8
 43a:	9f 92       	push	r9
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	8c 01       	movw	r16, r24
 452:	6c 01       	movw	r12, r24
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	c8 1a       	sub	r12, r24
 458:	d8 0a       	sbc	r13, r24
 45a:	78 01       	movw	r14, r16
 45c:	e2 e0       	ldi	r30, 0x02	; 2
 45e:	ee 0e       	add	r14, r30
 460:	f1 1c       	adc	r15, r1
 462:	48 01       	movw	r8, r16
 464:	f3 e0       	ldi	r31, 0x03	; 3
 466:	8f 0e       	add	r8, r31
 468:	91 1c       	adc	r9, r1
 46a:	58 01       	movw	r10, r16
 46c:	80 e1       	ldi	r24, 0x10	; 16
 46e:	a8 0e       	add	r10, r24
 470:	b1 1c       	adc	r11, r1
													register uint8_t i, a, b, c, d, e;

													for (i = 0; i < 16; i += 4)
													{
														a = buf[i]; b = buf[i + 1]; c = buf[i + 2]; d = buf[i + 3];
 472:	f8 01       	movw	r30, r16
 474:	d0 81       	ld	r29, Z
 476:	f6 01       	movw	r30, r12
 478:	50 80       	ld	r5, Z
 47a:	f7 01       	movw	r30, r14
 47c:	40 80       	ld	r4, Z
 47e:	f4 01       	movw	r30, r8
 480:	70 80       	ld	r7, Z
														e = a ^ b ^ c ^ d;
 482:	85 2d       	mov	r24, r5
 484:	8d 27       	eor	r24, r29
 486:	67 2c       	mov	r6, r7
 488:	64 24       	eor	r6, r4
 48a:	c6 2d       	mov	r28, r6
 48c:	c8 27       	eor	r28, r24
														buf[i] ^= e ^ rj_xtime(a^b);   buf[i+1] ^= e ^ rj_xtime(b^c);
 48e:	0e 94 af 01 	call	0x35e	; 0x35e <rj_xtime>
 492:	8c 27       	eor	r24, r28
 494:	98 2f       	mov	r25, r24
 496:	9d 27       	eor	r25, r29
 498:	f8 01       	movw	r30, r16
 49a:	90 83       	st	Z, r25
 49c:	84 2d       	mov	r24, r4
 49e:	85 25       	eor	r24, r5
 4a0:	0e 94 af 01 	call	0x35e	; 0x35e <rj_xtime>
 4a4:	9c 2f       	mov	r25, r28
 4a6:	98 27       	eor	r25, r24
 4a8:	f6 01       	movw	r30, r12
 4aa:	80 81       	ld	r24, Z
 4ac:	98 27       	eor	r25, r24
 4ae:	90 83       	st	Z, r25
														buf[i+2] ^= e ^ rj_xtime(c^d); buf[i+3] ^= e ^ rj_xtime(d^a);
 4b0:	86 2d       	mov	r24, r6
 4b2:	0e 94 af 01 	call	0x35e	; 0x35e <rj_xtime>
 4b6:	9c 2f       	mov	r25, r28
 4b8:	98 27       	eor	r25, r24
 4ba:	f7 01       	movw	r30, r14
 4bc:	80 81       	ld	r24, Z
 4be:	98 27       	eor	r25, r24
 4c0:	90 83       	st	Z, r25
 4c2:	87 2d       	mov	r24, r7
 4c4:	8d 27       	eor	r24, r29
 4c6:	0e 94 af 01 	call	0x35e	; 0x35e <rj_xtime>
 4ca:	8c 27       	eor	r24, r28
 4cc:	f4 01       	movw	r30, r8
 4ce:	c0 81       	ld	r28, Z
 4d0:	c8 27       	eor	r28, r24
 4d2:	c0 83       	st	Z, r28
 4d4:	0c 5f       	subi	r16, 0xFC	; 252
 4d6:	1f 4f       	sbci	r17, 0xFF	; 255
 4d8:	f4 e0       	ldi	r31, 0x04	; 4
 4da:	cf 0e       	add	r12, r31
 4dc:	d1 1c       	adc	r13, r1
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	e8 0e       	add	r14, r24
 4e2:	f1 1c       	adc	r15, r1
 4e4:	e4 e0       	ldi	r30, 0x04	; 4
 4e6:	8e 0e       	add	r8, r30
 4e8:	91 1c       	adc	r9, r1
												/* -------------------------------------------------------------------------- */
												void aes_mixColumns(uint8_t *buf)
												{
													register uint8_t i, a, b, c, d, e;

													for (i = 0; i < 16; i += 4)
 4ea:	0a 15       	cp	r16, r10
 4ec:	1b 05       	cpc	r17, r11
 4ee:	09 f6       	brne	.-126    	; 0x472 <aes_mixColumns+0x42>
														a = buf[i]; b = buf[i + 1]; c = buf[i + 2]; d = buf[i + 3];
														e = a ^ b ^ c ^ d;
														buf[i] ^= e ^ rj_xtime(a^b);   buf[i+1] ^= e ^ rj_xtime(b^c);
														buf[i+2] ^= e ^ rj_xtime(c^d); buf[i+3] ^= e ^ rj_xtime(d^a);
													}
													} /* aes_mixColumns */
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	ef 90       	pop	r14
 4fc:	df 90       	pop	r13
 4fe:	cf 90       	pop	r12
 500:	bf 90       	pop	r11
 502:	af 90       	pop	r10
 504:	9f 90       	pop	r9
 506:	8f 90       	pop	r8
 508:	7f 90       	pop	r7
 50a:	6f 90       	pop	r6
 50c:	5f 90       	pop	r5
 50e:	4f 90       	pop	r4
 510:	08 95       	ret

00000512 <aes_expandEncKey>:
														}
														} /* aes_mixColumns_inv */

														/* -------------------------------------------------------------------------- */
														void aes_expandEncKey(uint8_t *k, uint8_t *rc)
														{
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	dc 01       	movw	r26, r24
 520:	eb 01       	movw	r28, r22
															register uint8_t i;

															k[0] ^= rj_sbox(k[29]) ^ (*rc);
 522:	5d 96       	adiw	r26, 0x1d	; 29
 524:	ec 91       	ld	r30, X
 526:	5d 97       	sbiw	r26, 0x1d	; 29
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	e8 59       	subi	r30, 0x98	; 152
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	e4 91       	lpm	r30, Z
 530:	88 81       	ld	r24, Y
 532:	e8 27       	eor	r30, r24
 534:	8c 91       	ld	r24, X
 536:	e8 27       	eor	r30, r24
 538:	ec 93       	st	X, r30
															k[1] ^= rj_sbox(k[30]);
 53a:	5e 96       	adiw	r26, 0x1e	; 30
 53c:	ec 91       	ld	r30, X
 53e:	5e 97       	sbiw	r26, 0x1e	; 30
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	e8 59       	subi	r30, 0x98	; 152
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	e4 91       	lpm	r30, Z
 548:	11 96       	adiw	r26, 0x01	; 1
 54a:	8c 91       	ld	r24, X
 54c:	11 97       	sbiw	r26, 0x01	; 1
 54e:	e8 27       	eor	r30, r24
 550:	11 96       	adiw	r26, 0x01	; 1
 552:	ec 93       	st	X, r30
 554:	11 97       	sbiw	r26, 0x01	; 1
															k[2] ^= rj_sbox(k[31]);
 556:	5f 96       	adiw	r26, 0x1f	; 31
 558:	ec 91       	ld	r30, X
 55a:	5f 97       	sbiw	r26, 0x1f	; 31
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	e8 59       	subi	r30, 0x98	; 152
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	e4 91       	lpm	r30, Z
 564:	12 96       	adiw	r26, 0x02	; 2
 566:	8c 91       	ld	r24, X
 568:	12 97       	sbiw	r26, 0x02	; 2
 56a:	e8 27       	eor	r30, r24
 56c:	12 96       	adiw	r26, 0x02	; 2
 56e:	ec 93       	st	X, r30
 570:	12 97       	sbiw	r26, 0x02	; 2
															k[3] ^= rj_sbox(k[28]);
 572:	5c 96       	adiw	r26, 0x1c	; 28
 574:	ec 91       	ld	r30, X
 576:	5c 97       	sbiw	r26, 0x1c	; 28
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	e8 59       	subi	r30, 0x98	; 152
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	e4 91       	lpm	r30, Z
 580:	13 96       	adiw	r26, 0x03	; 3
 582:	8c 91       	ld	r24, X
 584:	13 97       	sbiw	r26, 0x03	; 3
 586:	e8 27       	eor	r30, r24
 588:	13 96       	adiw	r26, 0x03	; 3
 58a:	ec 93       	st	X, r30
 58c:	13 97       	sbiw	r26, 0x03	; 3
															*rc = F( *rc);
 58e:	88 81       	ld	r24, Y
 590:	98 2f       	mov	r25, r24
 592:	99 1f       	adc	r25, r25
 594:	99 27       	eor	r25, r25
 596:	99 1f       	adc	r25, r25
 598:	2b e1       	ldi	r18, 0x1B	; 27
 59a:	92 9f       	mul	r25, r18
 59c:	90 2d       	mov	r25, r0
 59e:	11 24       	eor	r1, r1
 5a0:	88 0f       	add	r24, r24
 5a2:	89 27       	eor	r24, r25
 5a4:	88 83       	st	Y, r24
 5a6:	9d 01       	movw	r18, r26
 5a8:	2c 5f       	subi	r18, 0xFC	; 252
 5aa:	3f 4f       	sbci	r19, 0xFF	; 255
 5ac:	cd 01       	movw	r24, r26
 5ae:	05 96       	adiw	r24, 0x05	; 5
 5b0:	7d 01       	movw	r14, r26
 5b2:	46 e0       	ldi	r20, 0x06	; 6
 5b4:	e4 0e       	add	r14, r20
 5b6:	f1 1c       	adc	r15, r1
 5b8:	fd 01       	movw	r30, r26
 5ba:	37 96       	adiw	r30, 0x07	; 7
 5bc:	bd 01       	movw	r22, r26
 5be:	6d 5e       	subi	r22, 0xED	; 237
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 01       	movw	r16, r30
 5c4:	07 50       	subi	r16, 0x07	; 7
 5c6:	11 09       	sbc	r17, r1

															for(i = 4; i < 16; i += 4)  k[i] ^= k[i-4],   k[i+1] ^= k[i-3],
 5c8:	e9 01       	movw	r28, r18
 5ca:	58 81       	ld	r21, Y
 5cc:	e8 01       	movw	r28, r16
 5ce:	48 81       	ld	r20, Y
 5d0:	45 27       	eor	r20, r21
 5d2:	e9 01       	movw	r28, r18
 5d4:	48 83       	st	Y, r20
 5d6:	0f 5f       	subi	r16, 0xFF	; 255
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	ec 01       	movw	r28, r24
 5dc:	58 81       	ld	r21, Y
 5de:	e8 01       	movw	r28, r16
 5e0:	48 81       	ld	r20, Y
 5e2:	45 27       	eor	r20, r21
 5e4:	ec 01       	movw	r28, r24
 5e6:	48 83       	st	Y, r20
 5e8:	0f 5f       	subi	r16, 0xFF	; 255
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
															k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];
 5ec:	e7 01       	movw	r28, r14
 5ee:	58 81       	ld	r21, Y
 5f0:	e8 01       	movw	r28, r16
 5f2:	48 81       	ld	r20, Y
 5f4:	45 27       	eor	r20, r21
 5f6:	e7 01       	movw	r28, r14
 5f8:	48 83       	st	Y, r20
 5fa:	0f 5f       	subi	r16, 0xFF	; 255
 5fc:	1f 4f       	sbci	r17, 0xFF	; 255
 5fe:	50 81       	ld	r21, Z
 600:	e8 01       	movw	r28, r16
 602:	48 81       	ld	r20, Y
 604:	45 27       	eor	r20, r21
 606:	40 83       	st	Z, r20
 608:	2c 5f       	subi	r18, 0xFC	; 252
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	04 96       	adiw	r24, 0x04	; 4
 60e:	d4 e0       	ldi	r29, 0x04	; 4
 610:	ed 0e       	add	r14, r29
 612:	f1 1c       	adc	r15, r1
 614:	34 96       	adiw	r30, 0x04	; 4
															k[1] ^= rj_sbox(k[30]);
															k[2] ^= rj_sbox(k[31]);
															k[3] ^= rj_sbox(k[28]);
															*rc = F( *rc);

															for(i = 4; i < 16; i += 4)  k[i] ^= k[i-4],   k[i+1] ^= k[i-3],
 616:	e6 17       	cp	r30, r22
 618:	f7 07       	cpc	r31, r23
 61a:	99 f6       	brne	.-90     	; 0x5c2 <aes_expandEncKey+0xb0>
															k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];
															k[16] ^= rj_sbox(k[12]);
 61c:	1c 96       	adiw	r26, 0x0c	; 12
 61e:	ec 91       	ld	r30, X
 620:	1c 97       	sbiw	r26, 0x0c	; 12
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	e8 59       	subi	r30, 0x98	; 152
 626:	ff 4f       	sbci	r31, 0xFF	; 255
 628:	e4 91       	lpm	r30, Z
 62a:	50 96       	adiw	r26, 0x10	; 16
 62c:	8c 91       	ld	r24, X
 62e:	50 97       	sbiw	r26, 0x10	; 16
 630:	e8 27       	eor	r30, r24
 632:	50 96       	adiw	r26, 0x10	; 16
 634:	ec 93       	st	X, r30
 636:	50 97       	sbiw	r26, 0x10	; 16
															k[17] ^= rj_sbox(k[13]);
 638:	1d 96       	adiw	r26, 0x0d	; 13
 63a:	ec 91       	ld	r30, X
 63c:	1d 97       	sbiw	r26, 0x0d	; 13
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	e8 59       	subi	r30, 0x98	; 152
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	e4 91       	lpm	r30, Z
 646:	51 96       	adiw	r26, 0x11	; 17
 648:	8c 91       	ld	r24, X
 64a:	51 97       	sbiw	r26, 0x11	; 17
 64c:	e8 27       	eor	r30, r24
 64e:	51 96       	adiw	r26, 0x11	; 17
 650:	ec 93       	st	X, r30
 652:	51 97       	sbiw	r26, 0x11	; 17
															k[18] ^= rj_sbox(k[14]);
 654:	1e 96       	adiw	r26, 0x0e	; 14
 656:	ec 91       	ld	r30, X
 658:	1e 97       	sbiw	r26, 0x0e	; 14
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	e8 59       	subi	r30, 0x98	; 152
 65e:	ff 4f       	sbci	r31, 0xFF	; 255
 660:	e4 91       	lpm	r30, Z
 662:	52 96       	adiw	r26, 0x12	; 18
 664:	8c 91       	ld	r24, X
 666:	52 97       	sbiw	r26, 0x12	; 18
 668:	e8 27       	eor	r30, r24
 66a:	52 96       	adiw	r26, 0x12	; 18
 66c:	ec 93       	st	X, r30
 66e:	52 97       	sbiw	r26, 0x12	; 18
															k[19] ^= rj_sbox(k[15]);
 670:	1f 96       	adiw	r26, 0x0f	; 15
 672:	ec 91       	ld	r30, X
 674:	1f 97       	sbiw	r26, 0x0f	; 15
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	e8 59       	subi	r30, 0x98	; 152
 67a:	ff 4f       	sbci	r31, 0xFF	; 255
 67c:	e4 91       	lpm	r30, Z
 67e:	53 96       	adiw	r26, 0x13	; 19
 680:	8c 91       	ld	r24, X
 682:	53 97       	sbiw	r26, 0x13	; 19
 684:	e8 27       	eor	r30, r24
 686:	53 96       	adiw	r26, 0x13	; 19
 688:	ec 93       	st	X, r30
 68a:	53 97       	sbiw	r26, 0x13	; 19
 68c:	ad 01       	movw	r20, r26
 68e:	4c 5e       	subi	r20, 0xEC	; 236
 690:	5f 4f       	sbci	r21, 0xFF	; 255
 692:	9d 01       	movw	r18, r26
 694:	2b 5e       	subi	r18, 0xEB	; 235
 696:	3f 4f       	sbci	r19, 0xFF	; 255
 698:	ed 01       	movw	r28, r26
 69a:	66 96       	adiw	r28, 0x16	; 22
 69c:	fd 01       	movw	r30, r26
 69e:	77 96       	adiw	r30, 0x17	; 23
 6a0:	8d 01       	movw	r16, r26
 6a2:	0d 5d       	subi	r16, 0xDD	; 221
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	bf 01       	movw	r22, r30
 6a8:	67 50       	subi	r22, 0x07	; 7
 6aa:	71 09       	sbc	r23, r1

															for(i = 20; i < 32; i += 4) k[i] ^= k[i-4],   k[i+1] ^= k[i-3],
 6ac:	da 01       	movw	r26, r20
 6ae:	8c 91       	ld	r24, X
 6b0:	db 01       	movw	r26, r22
 6b2:	9c 91       	ld	r25, X
 6b4:	98 27       	eor	r25, r24
 6b6:	da 01       	movw	r26, r20
 6b8:	9c 93       	st	X, r25
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	d9 01       	movw	r26, r18
 6c0:	8c 91       	ld	r24, X
 6c2:	db 01       	movw	r26, r22
 6c4:	9c 91       	ld	r25, X
 6c6:	98 27       	eor	r25, r24
 6c8:	d9 01       	movw	r26, r18
 6ca:	9c 93       	st	X, r25
 6cc:	6f 5f       	subi	r22, 0xFF	; 255
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
															k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];
 6d0:	88 81       	ld	r24, Y
 6d2:	db 01       	movw	r26, r22
 6d4:	9c 91       	ld	r25, X
 6d6:	98 27       	eor	r25, r24
 6d8:	98 83       	st	Y, r25
 6da:	6f 5f       	subi	r22, 0xFF	; 255
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	80 81       	ld	r24, Z
 6e0:	db 01       	movw	r26, r22
 6e2:	9c 91       	ld	r25, X
 6e4:	98 27       	eor	r25, r24
 6e6:	90 83       	st	Z, r25
 6e8:	4c 5f       	subi	r20, 0xFC	; 252
 6ea:	5f 4f       	sbci	r21, 0xFF	; 255
 6ec:	2c 5f       	subi	r18, 0xFC	; 252
 6ee:	3f 4f       	sbci	r19, 0xFF	; 255
 6f0:	24 96       	adiw	r28, 0x04	; 4
 6f2:	34 96       	adiw	r30, 0x04	; 4
															k[16] ^= rj_sbox(k[12]);
															k[17] ^= rj_sbox(k[13]);
															k[18] ^= rj_sbox(k[14]);
															k[19] ^= rj_sbox(k[15]);

															for(i = 20; i < 32; i += 4) k[i] ^= k[i-4],   k[i+1] ^= k[i-3],
 6f4:	e0 17       	cp	r30, r16
 6f6:	f1 07       	cpc	r31, r17
 6f8:	b1 f6       	brne	.-84     	; 0x6a6 <aes_expandEncKey+0x194>
															k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];

															} /* aes_expandEncKey */
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	08 95       	ret

00000708 <aes256_init_ecb>:
																} /* aes_expandDecKey */


																/* -------------------------------------------------------------------------- */
																void aes256_init_ecb(aes256_context *ctx, uint8_t *k)
																{
 708:	ef 92       	push	r14
 70a:	ff 92       	push	r15
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	1f 92       	push	r1
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	7c 01       	movw	r14, r24
																	uint8_t rcon = 1;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	06 2f       	mov	r16, r22
 722:	17 2f       	mov	r17, r23
 724:	f7 01       	movw	r30, r14
 726:	e0 5c       	subi	r30, 0xC0	; 192
 728:	ff 4f       	sbci	r31, 0xFF	; 255
 72a:	97 01       	movw	r18, r14
 72c:	20 5e       	subi	r18, 0xE0	; 224
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	a7 01       	movw	r20, r14
 732:	40 5a       	subi	r20, 0xA0	; 160
 734:	5f 4f       	sbci	r21, 0xFF	; 255
																	register uint8_t i;

																	for (i = 0; i < sizeof(ctx->key); i++) ctx->enckey[i] = ctx->deckey[i] = k[i];
 736:	d8 01       	movw	r26, r16
 738:	9d 91       	ld	r25, X+
 73a:	8d 01       	movw	r16, r26
 73c:	91 93       	st	Z+, r25
 73e:	d9 01       	movw	r26, r18
 740:	9d 93       	st	X+, r25
 742:	9d 01       	movw	r18, r26
 744:	e4 17       	cp	r30, r20
 746:	f5 07       	cpc	r31, r21
 748:	b1 f7       	brne	.-20     	; 0x736 <aes256_init_ecb+0x2e>
 74a:	17 e0       	ldi	r17, 0x07	; 7
																	for (i = 8;--i;) aes_expandEncKey(ctx->deckey, &rcon);
 74c:	b0 e4       	ldi	r27, 0x40	; 64
 74e:	eb 0e       	add	r14, r27
 750:	f1 1c       	adc	r15, r1
 752:	be 01       	movw	r22, r28
 754:	6f 5f       	subi	r22, 0xFF	; 255
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	c7 01       	movw	r24, r14
 75a:	0e 94 89 02 	call	0x512	; 0x512 <aes_expandEncKey>
 75e:	11 50       	subi	r17, 0x01	; 1
 760:	c1 f7       	brne	.-16     	; 0x752 <aes256_init_ecb+0x4a>
																	} /* aes256_init_ecb */
 762:	0f 90       	pop	r0
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	ef 90       	pop	r14
 770:	08 95       	ret

00000772 <aes256_encrypt_ecb>:
																		ctx->key[i] = ctx->enckey[i] = ctx->deckey[i] = 0;
																		} /* aes256_done */

																		/* -------------------------------------------------------------------------- */
																		void aes256_encrypt_ecb(aes256_context *ctx, uint8_t *buf)
																		{
 772:	8f 92       	push	r8
 774:	9f 92       	push	r9
 776:	af 92       	push	r10
 778:	bf 92       	push	r11
 77a:	df 92       	push	r13
 77c:	ef 92       	push	r14
 77e:	ff 92       	push	r15
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	1f 92       	push	r1
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	5c 01       	movw	r10, r24
 790:	8b 01       	movw	r16, r22
																			uint8_t i, rcon;

																			aes_addRoundKey_cpy(buf, ctx->enckey, ctx->key);
 792:	d8 2e       	mov	r13, r24
 794:	eb 2c       	mov	r14, r11
 796:	bc 01       	movw	r22, r24
 798:	60 5e       	subi	r22, 0xE0	; 224
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	ac 01       	movw	r20, r24
 79e:	c8 01       	movw	r24, r16
 7a0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <aes_addRoundKey_cpy>
																			for(i = 1, rcon = 1; i < 14; ++i)
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	89 83       	std	Y+1, r24	; 0x01
 7a8:	ff 24       	eor	r15, r15
 7aa:	f3 94       	inc	r15
																			{
																				aes_subBytes(buf);
																				aes_shiftRows(buf);
																				aes_mixColumns(buf);
																				if( i & 1 ) aes_addRoundKey( buf, &ctx->key[16]);
 7ac:	45 01       	movw	r8, r10
 7ae:	80 e1       	ldi	r24, 0x10	; 16
 7b0:	88 0e       	add	r8, r24
 7b2:	91 1c       	adc	r9, r1
																			uint8_t i, rcon;

																			aes_addRoundKey_cpy(buf, ctx->enckey, ctx->key);
																			for(i = 1, rcon = 1; i < 14; ++i)
																			{
																				aes_subBytes(buf);
 7b4:	c8 01       	movw	r24, r16
 7b6:	0e 94 b7 01 	call	0x36e	; 0x36e <aes_subBytes>
																				aes_shiftRows(buf);
 7ba:	c8 01       	movw	r24, r16
 7bc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <aes_shiftRows>
																				aes_mixColumns(buf);
 7c0:	c8 01       	movw	r24, r16
 7c2:	0e 94 18 02 	call	0x430	; 0x430 <aes_mixColumns>
																				if( i & 1 ) aes_addRoundKey( buf, &ctx->key[16]);
 7c6:	f0 fe       	sbrs	r15, 0
 7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <aes256_encrypt_ecb+0x62>
 7ca:	b4 01       	movw	r22, r8
 7cc:	c8 01       	movw	r24, r16
 7ce:	0e 94 c5 01 	call	0x38a	; 0x38a <aes_addRoundKey>
 7d2:	0c c0       	rjmp	.+24     	; 0x7ec <aes256_encrypt_ecb+0x7a>
																				else aes_expandEncKey(ctx->key, &rcon), aes_addRoundKey(buf, ctx->key);
 7d4:	be 01       	movw	r22, r28
 7d6:	6f 5f       	subi	r22, 0xFF	; 255
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8d 2d       	mov	r24, r13
 7dc:	9e 2d       	mov	r25, r14
 7de:	0e 94 89 02 	call	0x512	; 0x512 <aes_expandEncKey>
 7e2:	6d 2d       	mov	r22, r13
 7e4:	7e 2d       	mov	r23, r14
 7e6:	c8 01       	movw	r24, r16
 7e8:	0e 94 c5 01 	call	0x38a	; 0x38a <aes_addRoundKey>
																		void aes256_encrypt_ecb(aes256_context *ctx, uint8_t *buf)
																		{
																			uint8_t i, rcon;

																			aes_addRoundKey_cpy(buf, ctx->enckey, ctx->key);
																			for(i = 1, rcon = 1; i < 14; ++i)
 7ec:	f3 94       	inc	r15
 7ee:	8e e0       	ldi	r24, 0x0E	; 14
 7f0:	f8 12       	cpse	r15, r24
 7f2:	e0 cf       	rjmp	.-64     	; 0x7b4 <aes256_encrypt_ecb+0x42>
																				aes_shiftRows(buf);
																				aes_mixColumns(buf);
																				if( i & 1 ) aes_addRoundKey( buf, &ctx->key[16]);
																				else aes_expandEncKey(ctx->key, &rcon), aes_addRoundKey(buf, ctx->key);
																			}
																			aes_subBytes(buf);
 7f4:	c8 01       	movw	r24, r16
 7f6:	0e 94 b7 01 	call	0x36e	; 0x36e <aes_subBytes>
																			aes_shiftRows(buf);
 7fa:	c8 01       	movw	r24, r16
 7fc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <aes_shiftRows>
																			aes_expandEncKey(ctx->key, &rcon);
 800:	be 01       	movw	r22, r28
 802:	6f 5f       	subi	r22, 0xFF	; 255
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	c5 01       	movw	r24, r10
 808:	0e 94 89 02 	call	0x512	; 0x512 <aes_expandEncKey>
																			aes_addRoundKey(buf, ctx->key);
 80c:	b5 01       	movw	r22, r10
 80e:	c8 01       	movw	r24, r16
 810:	0e 94 c5 01 	call	0x38a	; 0x38a <aes_addRoundKey>
																			} /* aes256_encrypt */
 814:	0f 90       	pop	r0
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	df 90       	pop	r13
 824:	bf 90       	pop	r11
 826:	af 90       	pop	r10
 828:	9f 90       	pop	r9
 82a:	8f 90       	pop	r8
 82c:	08 95       	ret

0000082e <main>:
char REC;


int main(void)
{
	InitADC();
 82e:	0e 94 30 04 	call	0x860	; 0x860 <InitADC>
	USART_Init(103);
 832:	87 e6       	ldi	r24, 0x67	; 103
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <USART_Init>
	while(1)
	{
		//ctr_enc();
		//cbc();
		//encrypt();
		ctr_enc_8b();
 83a:	0e 94 82 04 	call	0x904	; 0x904 <ctr_enc_8b>
//	uint8_t dat[16] = "9F3B7504926F8BD36E3118E903A4CD4A";
	decrypt_ecb();
//		USART_send_str(dat);		//http://electronics.stackexchange.com/questions/161242/receiving-a-whole-string-from-usart-on-atmega16
//		USART_send_str("\n");
	    //USART_Transmit("\n");		*/
	}
 83e:	fd cf       	rjmp	.-6      	; 0x83a <main+0xc>

00000840 <__vector_18>:

	return 0;
}
ISR(USART_RX_vect)
{
 840:	1f 92       	push	r1
 842:	0f 92       	push	r0
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	0f 92       	push	r0
 848:	11 24       	eor	r1, r1
 84a:	8f 93       	push	r24
	REC = UDR0;
 84c:	80 91 c6 00 	lds	r24, 0x00C6
 850:	80 93 42 01 	sts	0x0142, r24
}
 854:	8f 91       	pop	r24
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <InitADC>:
#include "adc.h"


void InitADC()
{
	ADMUX = (1<<REFS0);
 860:	80 e4       	ldi	r24, 0x40	; 64
 862:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //prescaler selection 128
 866:	87 e8       	ldi	r24, 0x87	; 135
 868:	80 93 7a 00 	sts	0x007A, r24
 86c:	08 95       	ret

0000086e <ReadADC>:
}

uint16_t ReadADC(uint8_t ch)
{
	ch &= 0b00000111;
	ADMUX |= ch;//= (ADMUX & 0xF8) | ch;
 86e:	ec e7       	ldi	r30, 0x7C	; 124
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	90 81       	ld	r25, Z
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //prescaler selection 128
}

uint16_t ReadADC(uint8_t ch)
{
	ch &= 0b00000111;
 874:	87 70       	andi	r24, 0x07	; 7
	ADMUX |= ch;//= (ADMUX & 0xF8) | ch;
 876:	98 2b       	or	r25, r24
 878:	90 83       	st	Z, r25
	
	ADCSRA |= (1<<ADSC);
 87a:	ea e7       	ldi	r30, 0x7A	; 122
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	80 64       	ori	r24, 0x40	; 64
 882:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADIF));
 884:	80 81       	ld	r24, Z
 886:	84 fd       	sbrc	r24, 4
 888:	fd cf       	rjmp	.-6      	; 0x884 <ReadADC+0x16>
	ADCSRA|=(1<<ADIF);
 88a:	ea e7       	ldi	r30, 0x7A	; 122
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	80 61       	ori	r24, 0x10	; 16
 892:	80 83       	st	Z, r24
	
	int val = ADC;
 894:	e8 e7       	ldi	r30, 0x78	; 120
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	91 81       	ldd	r25, Z+1	; 0x01
	ADCH = 0;
 89c:	10 92 79 00 	sts	0x0079, r1
	ADCL = 0;
 8a0:	10 82       	st	Z, r1
	return (val);
 8a2:	08 95       	ret

000008a4 <hexa_to_ascii>:
#include "serial.h"

char hexa_to_ascii(uint8_t input)
{

	input &= 0x0F;
 8a4:	8f 70       	andi	r24, 0x0F	; 15

	if (input < 10)
 8a6:	8a 30       	cpi	r24, 0x0A	; 10
 8a8:	10 f4       	brcc	.+4      	; 0x8ae <hexa_to_ascii+0xa>
	{
		input = input + '0';
 8aa:	80 5d       	subi	r24, 0xD0	; 208
 8ac:	08 95       	ret
	}
	else
	{
		input = input + 'A' - 10;
 8ae:	89 5c       	subi	r24, 0xC9	; 201
	}

	return (char)input;
}
 8b0:	08 95       	ret

000008b2 <print_hex>:

void print_hex(uint8_t *ptr, uint8_t size)
{
 8b2:	ef 92       	push	r14
 8b4:	ff 92       	push	r15
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
	uint8_t i;

	for(i=0; i<size; i++)     {
 8be:	66 23       	and	r22, r22
 8c0:	d1 f0       	breq	.+52     	; 0x8f6 <print_hex+0x44>
 8c2:	ec 01       	movw	r28, r24
 8c4:	61 50       	subi	r22, 0x01	; 1
 8c6:	06 2f       	mov	r16, r22
 8c8:	10 e0       	ldi	r17, 0x00	; 0
 8ca:	0f 5f       	subi	r16, 0xFF	; 255
 8cc:	1f 4f       	sbci	r17, 0xFF	; 255
 8ce:	08 0f       	add	r16, r24
 8d0:	19 1f       	adc	r17, r25
 8d2:	7e 01       	movw	r14, r28
		USART_Transmit(hexa_to_ascii(ptr[i]>>4));
 8d4:	89 91       	ld	r24, Y+
 8d6:	82 95       	swap	r24
 8d8:	8f 70       	andi	r24, 0x0F	; 15
 8da:	0e 94 52 04 	call	0x8a4	; 0x8a4 <hexa_to_ascii>
 8de:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <USART_Transmit>
		USART_Transmit(hexa_to_ascii(ptr[i]&0x0F));
 8e2:	f7 01       	movw	r30, r14
 8e4:	80 81       	ld	r24, Z
 8e6:	8f 70       	andi	r24, 0x0F	; 15
 8e8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <hexa_to_ascii>
 8ec:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <USART_Transmit>

void print_hex(uint8_t *ptr, uint8_t size)
{
	uint8_t i;

	for(i=0; i<size; i++)     {
 8f0:	c0 17       	cp	r28, r16
 8f2:	d1 07       	cpc	r29, r17
 8f4:	71 f7       	brne	.-36     	; 0x8d2 <print_hex+0x20>
		USART_Transmit(hexa_to_ascii(ptr[i]>>4));
		USART_Transmit(hexa_to_ascii(ptr[i]&0x0F));
	}
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	1f 91       	pop	r17
 8fc:	0f 91       	pop	r16
 8fe:	ff 90       	pop	r15
 900:	ef 90       	pop	r14
 902:	08 95       	ret

00000904 <ctr_enc_8b>:
#endif

}

void ctr_enc_8b()
{
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	c3 58       	subi	r28, 0x83	; 131
 912:	d1 09       	sbc	r29, r1
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	f8 94       	cli
 918:	de bf       	out	0x3e, r29	; 62
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	cd bf       	out	0x3d, r28	; 61
	uint8_t	 a = (uint8_t)((50 * ReadADC(0))/1023);
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	0e 94 37 04 	call	0x86e	; 0x86e <ReadADC>
	uint8_t text[2] ;
	memset(text, 0, sizeof(text));
 924:	1a 82       	std	Y+2, r1	; 0x02
 926:	19 82       	std	Y+1, r1	; 0x01

}

void ctr_enc_8b()
{
	uint8_t	 a = (uint8_t)((50 * ReadADC(0))/1023);
 928:	22 e3       	ldi	r18, 0x32	; 50
 92a:	ac 01       	movw	r20, r24
 92c:	24 9f       	mul	r18, r20
 92e:	c0 01       	movw	r24, r0
 930:	25 9f       	mul	r18, r21
 932:	90 0d       	add	r25, r0
 934:	11 24       	eor	r1, r1
 936:	6f ef       	ldi	r22, 0xFF	; 255
 938:	73 e0       	ldi	r23, 0x03	; 3
 93a:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 93e:	77 27       	eor	r23, r23
	uint8_t text[2] ;
	memset(text, 0, sizeof(text));
	sprintf(text, "%d", a);
 940:	7f 93       	push	r23
 942:	6f 93       	push	r22
 944:	80 e2       	ldi	r24, 0x20	; 32
 946:	91 e0       	ldi	r25, 0x01	; 1
 948:	9f 93       	push	r25
 94a:	8f 93       	push	r24
 94c:	8e 01       	movw	r16, r28
 94e:	0f 5f       	subi	r16, 0xFF	; 255
 950:	1f 4f       	sbci	r17, 0xFF	; 255
 952:	1f 93       	push	r17
 954:	0f 93       	push	r16
 956:	0e 94 1e 05 	call	0xa3c	; 0xa3c <sprintf>
	//USART_Transmit(text[4]);
	//USART_Transmit(text[5]);
//
//	USART_Transmit("\n");
	aes256CtrCtx_t ctx;
	aes256CtrInit(&ctx, key, iv, 16);
 95a:	20 e1       	ldi	r18, 0x10	; 16
 95c:	42 e3       	ldi	r20, 0x32	; 50
 95e:	51 e0       	ldi	r21, 0x01	; 1
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	71 e0       	ldi	r23, 0x01	; 1
 964:	ce 01       	movw	r24, r28
 966:	03 96       	adiw	r24, 0x03	; 3
 968:	0e 94 0a 01 	call	0x214	; 0x214 <aes256CtrInit>

	aes256CtrEncrypt(&ctx, text, sizeof(text)) ;
 96c:	42 e0       	ldi	r20, 0x02	; 2
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	b8 01       	movw	r22, r16
 972:	ce 01       	movw	r24, r28
 974:	03 96       	adiw	r24, 0x03	; 3
 976:	0e 94 3e 01 	call	0x27c	; 0x27c <aes256CtrEncrypt>
	//uint8_t x[32] ;
	//strcpy(x, text);
	print_hex(text, 2);
 97a:	62 e0       	ldi	r22, 0x02	; 2
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	c8 01       	movw	r24, r16
 980:	0e 94 59 04 	call	0x8b2	; 0x8b2 <print_hex>
	USART_send_str("\n");
 984:	83 e2       	ldi	r24, 0x23	; 35
 986:	91 e0       	ldi	r25, 0x01	; 1
 988:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <USART_send_str>
	
	aes256CtrInit(&ctx, key, iv, 16);
 98c:	20 e1       	ldi	r18, 0x10	; 16
 98e:	42 e3       	ldi	r20, 0x32	; 50
 990:	51 e0       	ldi	r21, 0x01	; 1
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	71 e0       	ldi	r23, 0x01	; 1
 996:	ce 01       	movw	r24, r28
 998:	03 96       	adiw	r24, 0x03	; 3
 99a:	0e 94 0a 01 	call	0x214	; 0x214 <aes256CtrInit>
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	0f 90       	pop	r0
 9a4:	0f 90       	pop	r0
 9a6:	0f 90       	pop	r0
 9a8:	0f 90       	pop	r0
	USART_Transmit(buffer2[29]);
	USART_send_str("\n");
	
	#endif

}
 9aa:	cd 57       	subi	r28, 0x7D	; 125
 9ac:	df 4f       	sbci	r29, 0xFF	; 255
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	1f 91       	pop	r17
 9be:	0f 91       	pop	r16
 9c0:	08 95       	ret

000009c2 <USART_Init>:
#include "serial.h"

// function to initialize UART
void USART_Init( unsigned int BAUDRATE)
{
	UBRR0H = (BAUDRATE>>8);                      // shift the register right by 8 bits
 9c2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = BAUDRATE;                           // set baud rate
 9c6:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|= (1<<TXEN0)|(1<<RXEN0);                // enable receiver and transmitter
 9ca:	e1 ec       	ldi	r30, 0xC1	; 193
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	88 61       	ori	r24, 0x18	; 24
 9d2:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0);                         //Enable ISR
 9d4:	80 81       	ld	r24, Z
 9d6:	80 68       	ori	r24, 0x80	; 128
 9d8:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C|= (1<<USBS0)|(3<<UCSZ00);  // 8bit data format UPM00 parity register, UCSZ00 Character SiZem USBS0 stop bite
 9da:	e2 ec       	ldi	r30, 0xC2	; 194
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	80 81       	ld	r24, Z
 9e0:	8e 60       	ori	r24, 0x0E	; 14
 9e2:	80 83       	st	Z, r24
 9e4:	08 95       	ret

000009e6 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 9e6:	e0 ec       	ldi	r30, 0xC0	; 192
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	90 81       	ld	r25, Z
 9ec:	95 ff       	sbrs	r25, 5
 9ee:	fd cf       	rjmp	.-6      	; 0x9ea <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data*/
	UDR0 = data;
 9f0:	80 93 c6 00 	sts	0x00C6, r24
 9f4:	08 95       	ret

000009f6 <USART_send_str>:
		for(length = 0; length < 0xFE; length++);
	}
}

void USART_send_str(char *data)
{
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	ec 01       	movw	r28, r24
	while(*data != 0)
 9fc:	88 81       	ld	r24, Y
 9fe:	88 23       	and	r24, r24
 a00:	31 f0       	breq	.+12     	; 0xa0e <USART_send_str+0x18>
 a02:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(*data++);
 a04:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <USART_Transmit>
	}
}

void USART_send_str(char *data)
{
	while(*data != 0)
 a08:	89 91       	ld	r24, Y+
 a0a:	81 11       	cpse	r24, r1
 a0c:	fb cf       	rjmp	.-10     	; 0xa04 <USART_send_str+0xe>
	{
		USART_Transmit(*data++);
	}
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	08 95       	ret

00000a14 <__udivmodhi4>:
 a14:	aa 1b       	sub	r26, r26
 a16:	bb 1b       	sub	r27, r27
 a18:	51 e1       	ldi	r21, 0x11	; 17
 a1a:	07 c0       	rjmp	.+14     	; 0xa2a <__udivmodhi4_ep>

00000a1c <__udivmodhi4_loop>:
 a1c:	aa 1f       	adc	r26, r26
 a1e:	bb 1f       	adc	r27, r27
 a20:	a6 17       	cp	r26, r22
 a22:	b7 07       	cpc	r27, r23
 a24:	10 f0       	brcs	.+4      	; 0xa2a <__udivmodhi4_ep>
 a26:	a6 1b       	sub	r26, r22
 a28:	b7 0b       	sbc	r27, r23

00000a2a <__udivmodhi4_ep>:
 a2a:	88 1f       	adc	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	5a 95       	dec	r21
 a30:	a9 f7       	brne	.-22     	; 0xa1c <__udivmodhi4_loop>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	bc 01       	movw	r22, r24
 a38:	cd 01       	movw	r24, r26
 a3a:	08 95       	ret

00000a3c <sprintf>:
 a3c:	ae e0       	ldi	r26, 0x0E	; 14
 a3e:	b0 e0       	ldi	r27, 0x00	; 0
 a40:	e4 e2       	ldi	r30, 0x24	; 36
 a42:	f5 e0       	ldi	r31, 0x05	; 5
 a44:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__prologue_saves__+0x1c>
 a48:	0d 89       	ldd	r16, Y+21	; 0x15
 a4a:	1e 89       	ldd	r17, Y+22	; 0x16
 a4c:	86 e0       	ldi	r24, 0x06	; 6
 a4e:	8c 83       	std	Y+4, r24	; 0x04
 a50:	1a 83       	std	Y+2, r17	; 0x02
 a52:	09 83       	std	Y+1, r16	; 0x01
 a54:	8f ef       	ldi	r24, 0xFF	; 255
 a56:	9f e7       	ldi	r25, 0x7F	; 127
 a58:	9e 83       	std	Y+6, r25	; 0x06
 a5a:	8d 83       	std	Y+5, r24	; 0x05
 a5c:	ae 01       	movw	r20, r28
 a5e:	47 5e       	subi	r20, 0xE7	; 231
 a60:	5f 4f       	sbci	r21, 0xFF	; 255
 a62:	6f 89       	ldd	r22, Y+23	; 0x17
 a64:	78 8d       	ldd	r23, Y+24	; 0x18
 a66:	ce 01       	movw	r24, r28
 a68:	01 96       	adiw	r24, 0x01	; 1
 a6a:	0e 94 41 05 	call	0xa82	; 0xa82 <vfprintf>
 a6e:	2f 81       	ldd	r18, Y+7	; 0x07
 a70:	38 85       	ldd	r19, Y+8	; 0x08
 a72:	f8 01       	movw	r30, r16
 a74:	e2 0f       	add	r30, r18
 a76:	f3 1f       	adc	r31, r19
 a78:	10 82       	st	Z, r1
 a7a:	2e 96       	adiw	r28, 0x0e	; 14
 a7c:	e4 e0       	ldi	r30, 0x04	; 4
 a7e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__epilogue_restores__+0x1c>

00000a82 <vfprintf>:
 a82:	ac e0       	ldi	r26, 0x0C	; 12
 a84:	b0 e0       	ldi	r27, 0x00	; 0
 a86:	e7 e4       	ldi	r30, 0x47	; 71
 a88:	f5 e0       	ldi	r31, 0x05	; 5
 a8a:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__prologue_saves__>
 a8e:	7c 01       	movw	r14, r24
 a90:	6b 01       	movw	r12, r22
 a92:	8a 01       	movw	r16, r20
 a94:	fc 01       	movw	r30, r24
 a96:	17 82       	std	Z+7, r1	; 0x07
 a98:	16 82       	std	Z+6, r1	; 0x06
 a9a:	83 81       	ldd	r24, Z+3	; 0x03
 a9c:	81 ff       	sbrs	r24, 1
 a9e:	bd c1       	rjmp	.+890    	; 0xe1a <vfprintf+0x398>
 aa0:	ce 01       	movw	r24, r28
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	4c 01       	movw	r8, r24
 aa6:	f7 01       	movw	r30, r14
 aa8:	93 81       	ldd	r25, Z+3	; 0x03
 aaa:	f6 01       	movw	r30, r12
 aac:	93 fd       	sbrc	r25, 3
 aae:	85 91       	lpm	r24, Z+
 ab0:	93 ff       	sbrs	r25, 3
 ab2:	81 91       	ld	r24, Z+
 ab4:	6f 01       	movw	r12, r30
 ab6:	88 23       	and	r24, r24
 ab8:	09 f4       	brne	.+2      	; 0xabc <vfprintf+0x3a>
 aba:	ab c1       	rjmp	.+854    	; 0xe12 <vfprintf+0x390>
 abc:	85 32       	cpi	r24, 0x25	; 37
 abe:	39 f4       	brne	.+14     	; 0xace <vfprintf+0x4c>
 ac0:	93 fd       	sbrc	r25, 3
 ac2:	85 91       	lpm	r24, Z+
 ac4:	93 ff       	sbrs	r25, 3
 ac6:	81 91       	ld	r24, Z+
 ac8:	6f 01       	movw	r12, r30
 aca:	85 32       	cpi	r24, 0x25	; 37
 acc:	29 f4       	brne	.+10     	; 0xad8 <vfprintf+0x56>
 ace:	b7 01       	movw	r22, r14
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 ad6:	e7 cf       	rjmp	.-50     	; 0xaa6 <vfprintf+0x24>
 ad8:	51 2c       	mov	r5, r1
 ada:	31 2c       	mov	r3, r1
 adc:	20 e0       	ldi	r18, 0x00	; 0
 ade:	20 32       	cpi	r18, 0x20	; 32
 ae0:	a0 f4       	brcc	.+40     	; 0xb0a <vfprintf+0x88>
 ae2:	8b 32       	cpi	r24, 0x2B	; 43
 ae4:	69 f0       	breq	.+26     	; 0xb00 <vfprintf+0x7e>
 ae6:	30 f4       	brcc	.+12     	; 0xaf4 <vfprintf+0x72>
 ae8:	80 32       	cpi	r24, 0x20	; 32
 aea:	59 f0       	breq	.+22     	; 0xb02 <vfprintf+0x80>
 aec:	83 32       	cpi	r24, 0x23	; 35
 aee:	69 f4       	brne	.+26     	; 0xb0a <vfprintf+0x88>
 af0:	20 61       	ori	r18, 0x10	; 16
 af2:	2c c0       	rjmp	.+88     	; 0xb4c <vfprintf+0xca>
 af4:	8d 32       	cpi	r24, 0x2D	; 45
 af6:	39 f0       	breq	.+14     	; 0xb06 <vfprintf+0x84>
 af8:	80 33       	cpi	r24, 0x30	; 48
 afa:	39 f4       	brne	.+14     	; 0xb0a <vfprintf+0x88>
 afc:	21 60       	ori	r18, 0x01	; 1
 afe:	26 c0       	rjmp	.+76     	; 0xb4c <vfprintf+0xca>
 b00:	22 60       	ori	r18, 0x02	; 2
 b02:	24 60       	ori	r18, 0x04	; 4
 b04:	23 c0       	rjmp	.+70     	; 0xb4c <vfprintf+0xca>
 b06:	28 60       	ori	r18, 0x08	; 8
 b08:	21 c0       	rjmp	.+66     	; 0xb4c <vfprintf+0xca>
 b0a:	27 fd       	sbrc	r18, 7
 b0c:	27 c0       	rjmp	.+78     	; 0xb5c <vfprintf+0xda>
 b0e:	30 ed       	ldi	r19, 0xD0	; 208
 b10:	38 0f       	add	r19, r24
 b12:	3a 30       	cpi	r19, 0x0A	; 10
 b14:	78 f4       	brcc	.+30     	; 0xb34 <vfprintf+0xb2>
 b16:	26 ff       	sbrs	r18, 6
 b18:	06 c0       	rjmp	.+12     	; 0xb26 <vfprintf+0xa4>
 b1a:	fa e0       	ldi	r31, 0x0A	; 10
 b1c:	5f 9e       	mul	r5, r31
 b1e:	30 0d       	add	r19, r0
 b20:	11 24       	eor	r1, r1
 b22:	53 2e       	mov	r5, r19
 b24:	13 c0       	rjmp	.+38     	; 0xb4c <vfprintf+0xca>
 b26:	8a e0       	ldi	r24, 0x0A	; 10
 b28:	38 9e       	mul	r3, r24
 b2a:	30 0d       	add	r19, r0
 b2c:	11 24       	eor	r1, r1
 b2e:	33 2e       	mov	r3, r19
 b30:	20 62       	ori	r18, 0x20	; 32
 b32:	0c c0       	rjmp	.+24     	; 0xb4c <vfprintf+0xca>
 b34:	8e 32       	cpi	r24, 0x2E	; 46
 b36:	21 f4       	brne	.+8      	; 0xb40 <vfprintf+0xbe>
 b38:	26 fd       	sbrc	r18, 6
 b3a:	6b c1       	rjmp	.+726    	; 0xe12 <vfprintf+0x390>
 b3c:	20 64       	ori	r18, 0x40	; 64
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <vfprintf+0xca>
 b40:	8c 36       	cpi	r24, 0x6C	; 108
 b42:	11 f4       	brne	.+4      	; 0xb48 <vfprintf+0xc6>
 b44:	20 68       	ori	r18, 0x80	; 128
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <vfprintf+0xca>
 b48:	88 36       	cpi	r24, 0x68	; 104
 b4a:	41 f4       	brne	.+16     	; 0xb5c <vfprintf+0xda>
 b4c:	f6 01       	movw	r30, r12
 b4e:	93 fd       	sbrc	r25, 3
 b50:	85 91       	lpm	r24, Z+
 b52:	93 ff       	sbrs	r25, 3
 b54:	81 91       	ld	r24, Z+
 b56:	6f 01       	movw	r12, r30
 b58:	81 11       	cpse	r24, r1
 b5a:	c1 cf       	rjmp	.-126    	; 0xade <vfprintf+0x5c>
 b5c:	98 2f       	mov	r25, r24
 b5e:	9f 7d       	andi	r25, 0xDF	; 223
 b60:	95 54       	subi	r25, 0x45	; 69
 b62:	93 30       	cpi	r25, 0x03	; 3
 b64:	28 f4       	brcc	.+10     	; 0xb70 <vfprintf+0xee>
 b66:	0c 5f       	subi	r16, 0xFC	; 252
 b68:	1f 4f       	sbci	r17, 0xFF	; 255
 b6a:	ff e3       	ldi	r31, 0x3F	; 63
 b6c:	f9 83       	std	Y+1, r31	; 0x01
 b6e:	0d c0       	rjmp	.+26     	; 0xb8a <vfprintf+0x108>
 b70:	83 36       	cpi	r24, 0x63	; 99
 b72:	31 f0       	breq	.+12     	; 0xb80 <vfprintf+0xfe>
 b74:	83 37       	cpi	r24, 0x73	; 115
 b76:	71 f0       	breq	.+28     	; 0xb94 <vfprintf+0x112>
 b78:	83 35       	cpi	r24, 0x53	; 83
 b7a:	09 f0       	breq	.+2      	; 0xb7e <vfprintf+0xfc>
 b7c:	5b c0       	rjmp	.+182    	; 0xc34 <vfprintf+0x1b2>
 b7e:	22 c0       	rjmp	.+68     	; 0xbc4 <vfprintf+0x142>
 b80:	f8 01       	movw	r30, r16
 b82:	80 81       	ld	r24, Z
 b84:	89 83       	std	Y+1, r24	; 0x01
 b86:	0e 5f       	subi	r16, 0xFE	; 254
 b88:	1f 4f       	sbci	r17, 0xFF	; 255
 b8a:	44 24       	eor	r4, r4
 b8c:	43 94       	inc	r4
 b8e:	51 2c       	mov	r5, r1
 b90:	54 01       	movw	r10, r8
 b92:	15 c0       	rjmp	.+42     	; 0xbbe <vfprintf+0x13c>
 b94:	38 01       	movw	r6, r16
 b96:	f2 e0       	ldi	r31, 0x02	; 2
 b98:	6f 0e       	add	r6, r31
 b9a:	71 1c       	adc	r7, r1
 b9c:	f8 01       	movw	r30, r16
 b9e:	a0 80       	ld	r10, Z
 ba0:	b1 80       	ldd	r11, Z+1	; 0x01
 ba2:	26 ff       	sbrs	r18, 6
 ba4:	03 c0       	rjmp	.+6      	; 0xbac <vfprintf+0x12a>
 ba6:	65 2d       	mov	r22, r5
 ba8:	70 e0       	ldi	r23, 0x00	; 0
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x12e>
 bac:	6f ef       	ldi	r22, 0xFF	; 255
 bae:	7f ef       	ldi	r23, 0xFF	; 255
 bb0:	c5 01       	movw	r24, r10
 bb2:	2c 87       	std	Y+12, r18	; 0x0c
 bb4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <strnlen>
 bb8:	2c 01       	movw	r4, r24
 bba:	83 01       	movw	r16, r6
 bbc:	2c 85       	ldd	r18, Y+12	; 0x0c
 bbe:	2f 77       	andi	r18, 0x7F	; 127
 bc0:	22 2e       	mov	r2, r18
 bc2:	17 c0       	rjmp	.+46     	; 0xbf2 <vfprintf+0x170>
 bc4:	38 01       	movw	r6, r16
 bc6:	f2 e0       	ldi	r31, 0x02	; 2
 bc8:	6f 0e       	add	r6, r31
 bca:	71 1c       	adc	r7, r1
 bcc:	f8 01       	movw	r30, r16
 bce:	a0 80       	ld	r10, Z
 bd0:	b1 80       	ldd	r11, Z+1	; 0x01
 bd2:	26 ff       	sbrs	r18, 6
 bd4:	03 c0       	rjmp	.+6      	; 0xbdc <vfprintf+0x15a>
 bd6:	65 2d       	mov	r22, r5
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0x15e>
 bdc:	6f ef       	ldi	r22, 0xFF	; 255
 bde:	7f ef       	ldi	r23, 0xFF	; 255
 be0:	c5 01       	movw	r24, r10
 be2:	2c 87       	std	Y+12, r18	; 0x0c
 be4:	0e 94 13 07 	call	0xe26	; 0xe26 <strnlen_P>
 be8:	2c 01       	movw	r4, r24
 bea:	2c 85       	ldd	r18, Y+12	; 0x0c
 bec:	20 68       	ori	r18, 0x80	; 128
 bee:	22 2e       	mov	r2, r18
 bf0:	83 01       	movw	r16, r6
 bf2:	23 fc       	sbrc	r2, 3
 bf4:	1b c0       	rjmp	.+54     	; 0xc2c <vfprintf+0x1aa>
 bf6:	83 2d       	mov	r24, r3
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	48 16       	cp	r4, r24
 bfc:	59 06       	cpc	r5, r25
 bfe:	b0 f4       	brcc	.+44     	; 0xc2c <vfprintf+0x1aa>
 c00:	b7 01       	movw	r22, r14
 c02:	80 e2       	ldi	r24, 0x20	; 32
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 c0a:	3a 94       	dec	r3
 c0c:	f4 cf       	rjmp	.-24     	; 0xbf6 <vfprintf+0x174>
 c0e:	f5 01       	movw	r30, r10
 c10:	27 fc       	sbrc	r2, 7
 c12:	85 91       	lpm	r24, Z+
 c14:	27 fe       	sbrs	r2, 7
 c16:	81 91       	ld	r24, Z+
 c18:	5f 01       	movw	r10, r30
 c1a:	b7 01       	movw	r22, r14
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 c22:	31 10       	cpse	r3, r1
 c24:	3a 94       	dec	r3
 c26:	f1 e0       	ldi	r31, 0x01	; 1
 c28:	4f 1a       	sub	r4, r31
 c2a:	51 08       	sbc	r5, r1
 c2c:	41 14       	cp	r4, r1
 c2e:	51 04       	cpc	r5, r1
 c30:	71 f7       	brne	.-36     	; 0xc0e <vfprintf+0x18c>
 c32:	e5 c0       	rjmp	.+458    	; 0xdfe <vfprintf+0x37c>
 c34:	84 36       	cpi	r24, 0x64	; 100
 c36:	11 f0       	breq	.+4      	; 0xc3c <vfprintf+0x1ba>
 c38:	89 36       	cpi	r24, 0x69	; 105
 c3a:	39 f5       	brne	.+78     	; 0xc8a <vfprintf+0x208>
 c3c:	f8 01       	movw	r30, r16
 c3e:	27 ff       	sbrs	r18, 7
 c40:	07 c0       	rjmp	.+14     	; 0xc50 <vfprintf+0x1ce>
 c42:	60 81       	ld	r22, Z
 c44:	71 81       	ldd	r23, Z+1	; 0x01
 c46:	82 81       	ldd	r24, Z+2	; 0x02
 c48:	93 81       	ldd	r25, Z+3	; 0x03
 c4a:	0c 5f       	subi	r16, 0xFC	; 252
 c4c:	1f 4f       	sbci	r17, 0xFF	; 255
 c4e:	08 c0       	rjmp	.+16     	; 0xc60 <vfprintf+0x1de>
 c50:	60 81       	ld	r22, Z
 c52:	71 81       	ldd	r23, Z+1	; 0x01
 c54:	07 2e       	mov	r0, r23
 c56:	00 0c       	add	r0, r0
 c58:	88 0b       	sbc	r24, r24
 c5a:	99 0b       	sbc	r25, r25
 c5c:	0e 5f       	subi	r16, 0xFE	; 254
 c5e:	1f 4f       	sbci	r17, 0xFF	; 255
 c60:	2f 76       	andi	r18, 0x6F	; 111
 c62:	72 2e       	mov	r7, r18
 c64:	97 ff       	sbrs	r25, 7
 c66:	09 c0       	rjmp	.+18     	; 0xc7a <vfprintf+0x1f8>
 c68:	90 95       	com	r25
 c6a:	80 95       	com	r24
 c6c:	70 95       	com	r23
 c6e:	61 95       	neg	r22
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	20 68       	ori	r18, 0x80	; 128
 c78:	72 2e       	mov	r7, r18
 c7a:	2a e0       	ldi	r18, 0x0A	; 10
 c7c:	30 e0       	ldi	r19, 0x00	; 0
 c7e:	a4 01       	movw	r20, r8
 c80:	0e 94 61 07 	call	0xec2	; 0xec2 <__ultoa_invert>
 c84:	a8 2e       	mov	r10, r24
 c86:	a8 18       	sub	r10, r8
 c88:	44 c0       	rjmp	.+136    	; 0xd12 <vfprintf+0x290>
 c8a:	85 37       	cpi	r24, 0x75	; 117
 c8c:	29 f4       	brne	.+10     	; 0xc98 <vfprintf+0x216>
 c8e:	2f 7e       	andi	r18, 0xEF	; 239
 c90:	b2 2e       	mov	r11, r18
 c92:	2a e0       	ldi	r18, 0x0A	; 10
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	25 c0       	rjmp	.+74     	; 0xce2 <vfprintf+0x260>
 c98:	f2 2f       	mov	r31, r18
 c9a:	f9 7f       	andi	r31, 0xF9	; 249
 c9c:	bf 2e       	mov	r11, r31
 c9e:	8f 36       	cpi	r24, 0x6F	; 111
 ca0:	c1 f0       	breq	.+48     	; 0xcd2 <vfprintf+0x250>
 ca2:	18 f4       	brcc	.+6      	; 0xcaa <vfprintf+0x228>
 ca4:	88 35       	cpi	r24, 0x58	; 88
 ca6:	79 f0       	breq	.+30     	; 0xcc6 <vfprintf+0x244>
 ca8:	b4 c0       	rjmp	.+360    	; 0xe12 <vfprintf+0x390>
 caa:	80 37       	cpi	r24, 0x70	; 112
 cac:	19 f0       	breq	.+6      	; 0xcb4 <vfprintf+0x232>
 cae:	88 37       	cpi	r24, 0x78	; 120
 cb0:	21 f0       	breq	.+8      	; 0xcba <vfprintf+0x238>
 cb2:	af c0       	rjmp	.+350    	; 0xe12 <vfprintf+0x390>
 cb4:	2f 2f       	mov	r18, r31
 cb6:	20 61       	ori	r18, 0x10	; 16
 cb8:	b2 2e       	mov	r11, r18
 cba:	b4 fe       	sbrs	r11, 4
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x256>
 cbe:	8b 2d       	mov	r24, r11
 cc0:	84 60       	ori	r24, 0x04	; 4
 cc2:	b8 2e       	mov	r11, r24
 cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <vfprintf+0x256>
 cc6:	24 ff       	sbrs	r18, 4
 cc8:	0a c0       	rjmp	.+20     	; 0xcde <vfprintf+0x25c>
 cca:	9f 2f       	mov	r25, r31
 ccc:	96 60       	ori	r25, 0x06	; 6
 cce:	b9 2e       	mov	r11, r25
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x25c>
 cd2:	28 e0       	ldi	r18, 0x08	; 8
 cd4:	30 e0       	ldi	r19, 0x00	; 0
 cd6:	05 c0       	rjmp	.+10     	; 0xce2 <vfprintf+0x260>
 cd8:	20 e1       	ldi	r18, 0x10	; 16
 cda:	30 e0       	ldi	r19, 0x00	; 0
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x260>
 cde:	20 e1       	ldi	r18, 0x10	; 16
 ce0:	32 e0       	ldi	r19, 0x02	; 2
 ce2:	f8 01       	movw	r30, r16
 ce4:	b7 fe       	sbrs	r11, 7
 ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <vfprintf+0x274>
 ce8:	60 81       	ld	r22, Z
 cea:	71 81       	ldd	r23, Z+1	; 0x01
 cec:	82 81       	ldd	r24, Z+2	; 0x02
 cee:	93 81       	ldd	r25, Z+3	; 0x03
 cf0:	0c 5f       	subi	r16, 0xFC	; 252
 cf2:	1f 4f       	sbci	r17, 0xFF	; 255
 cf4:	06 c0       	rjmp	.+12     	; 0xd02 <vfprintf+0x280>
 cf6:	60 81       	ld	r22, Z
 cf8:	71 81       	ldd	r23, Z+1	; 0x01
 cfa:	80 e0       	ldi	r24, 0x00	; 0
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 5f       	subi	r16, 0xFE	; 254
 d00:	1f 4f       	sbci	r17, 0xFF	; 255
 d02:	a4 01       	movw	r20, r8
 d04:	0e 94 61 07 	call	0xec2	; 0xec2 <__ultoa_invert>
 d08:	a8 2e       	mov	r10, r24
 d0a:	a8 18       	sub	r10, r8
 d0c:	fb 2d       	mov	r31, r11
 d0e:	ff 77       	andi	r31, 0x7F	; 127
 d10:	7f 2e       	mov	r7, r31
 d12:	76 fe       	sbrs	r7, 6
 d14:	0b c0       	rjmp	.+22     	; 0xd2c <vfprintf+0x2aa>
 d16:	37 2d       	mov	r19, r7
 d18:	3e 7f       	andi	r19, 0xFE	; 254
 d1a:	a5 14       	cp	r10, r5
 d1c:	50 f4       	brcc	.+20     	; 0xd32 <vfprintf+0x2b0>
 d1e:	74 fe       	sbrs	r7, 4
 d20:	0a c0       	rjmp	.+20     	; 0xd36 <vfprintf+0x2b4>
 d22:	72 fc       	sbrc	r7, 2
 d24:	08 c0       	rjmp	.+16     	; 0xd36 <vfprintf+0x2b4>
 d26:	37 2d       	mov	r19, r7
 d28:	3e 7e       	andi	r19, 0xEE	; 238
 d2a:	05 c0       	rjmp	.+10     	; 0xd36 <vfprintf+0x2b4>
 d2c:	ba 2c       	mov	r11, r10
 d2e:	37 2d       	mov	r19, r7
 d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x2b6>
 d32:	ba 2c       	mov	r11, r10
 d34:	01 c0       	rjmp	.+2      	; 0xd38 <vfprintf+0x2b6>
 d36:	b5 2c       	mov	r11, r5
 d38:	34 ff       	sbrs	r19, 4
 d3a:	0d c0       	rjmp	.+26     	; 0xd56 <vfprintf+0x2d4>
 d3c:	fe 01       	movw	r30, r28
 d3e:	ea 0d       	add	r30, r10
 d40:	f1 1d       	adc	r31, r1
 d42:	80 81       	ld	r24, Z
 d44:	80 33       	cpi	r24, 0x30	; 48
 d46:	11 f4       	brne	.+4      	; 0xd4c <vfprintf+0x2ca>
 d48:	39 7e       	andi	r19, 0xE9	; 233
 d4a:	09 c0       	rjmp	.+18     	; 0xd5e <vfprintf+0x2dc>
 d4c:	32 ff       	sbrs	r19, 2
 d4e:	06 c0       	rjmp	.+12     	; 0xd5c <vfprintf+0x2da>
 d50:	b3 94       	inc	r11
 d52:	b3 94       	inc	r11
 d54:	04 c0       	rjmp	.+8      	; 0xd5e <vfprintf+0x2dc>
 d56:	83 2f       	mov	r24, r19
 d58:	86 78       	andi	r24, 0x86	; 134
 d5a:	09 f0       	breq	.+2      	; 0xd5e <vfprintf+0x2dc>
 d5c:	b3 94       	inc	r11
 d5e:	33 fd       	sbrc	r19, 3
 d60:	13 c0       	rjmp	.+38     	; 0xd88 <vfprintf+0x306>
 d62:	30 ff       	sbrs	r19, 0
 d64:	06 c0       	rjmp	.+12     	; 0xd72 <vfprintf+0x2f0>
 d66:	5a 2c       	mov	r5, r10
 d68:	b3 14       	cp	r11, r3
 d6a:	18 f4       	brcc	.+6      	; 0xd72 <vfprintf+0x2f0>
 d6c:	53 0c       	add	r5, r3
 d6e:	5b 18       	sub	r5, r11
 d70:	b3 2c       	mov	r11, r3
 d72:	b3 14       	cp	r11, r3
 d74:	68 f4       	brcc	.+26     	; 0xd90 <vfprintf+0x30e>
 d76:	b7 01       	movw	r22, r14
 d78:	80 e2       	ldi	r24, 0x20	; 32
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	3c 87       	std	Y+12, r19	; 0x0c
 d7e:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 d82:	b3 94       	inc	r11
 d84:	3c 85       	ldd	r19, Y+12	; 0x0c
 d86:	f5 cf       	rjmp	.-22     	; 0xd72 <vfprintf+0x2f0>
 d88:	b3 14       	cp	r11, r3
 d8a:	10 f4       	brcc	.+4      	; 0xd90 <vfprintf+0x30e>
 d8c:	3b 18       	sub	r3, r11
 d8e:	01 c0       	rjmp	.+2      	; 0xd92 <vfprintf+0x310>
 d90:	31 2c       	mov	r3, r1
 d92:	34 ff       	sbrs	r19, 4
 d94:	12 c0       	rjmp	.+36     	; 0xdba <vfprintf+0x338>
 d96:	b7 01       	movw	r22, r14
 d98:	80 e3       	ldi	r24, 0x30	; 48
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	3c 87       	std	Y+12, r19	; 0x0c
 d9e:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 da2:	3c 85       	ldd	r19, Y+12	; 0x0c
 da4:	32 ff       	sbrs	r19, 2
 da6:	17 c0       	rjmp	.+46     	; 0xdd6 <vfprintf+0x354>
 da8:	31 fd       	sbrc	r19, 1
 daa:	03 c0       	rjmp	.+6      	; 0xdb2 <vfprintf+0x330>
 dac:	88 e7       	ldi	r24, 0x78	; 120
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x334>
 db2:	88 e5       	ldi	r24, 0x58	; 88
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	b7 01       	movw	r22, r14
 db8:	0c c0       	rjmp	.+24     	; 0xdd2 <vfprintf+0x350>
 dba:	83 2f       	mov	r24, r19
 dbc:	86 78       	andi	r24, 0x86	; 134
 dbe:	59 f0       	breq	.+22     	; 0xdd6 <vfprintf+0x354>
 dc0:	31 ff       	sbrs	r19, 1
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x346>
 dc4:	8b e2       	ldi	r24, 0x2B	; 43
 dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x348>
 dc8:	80 e2       	ldi	r24, 0x20	; 32
 dca:	37 fd       	sbrc	r19, 7
 dcc:	8d e2       	ldi	r24, 0x2D	; 45
 dce:	b7 01       	movw	r22, r14
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 dd6:	a5 14       	cp	r10, r5
 dd8:	38 f4       	brcc	.+14     	; 0xde8 <vfprintf+0x366>
 dda:	b7 01       	movw	r22, r14
 ddc:	80 e3       	ldi	r24, 0x30	; 48
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 de4:	5a 94       	dec	r5
 de6:	f7 cf       	rjmp	.-18     	; 0xdd6 <vfprintf+0x354>
 de8:	aa 94       	dec	r10
 dea:	f4 01       	movw	r30, r8
 dec:	ea 0d       	add	r30, r10
 dee:	f1 1d       	adc	r31, r1
 df0:	80 81       	ld	r24, Z
 df2:	b7 01       	movw	r22, r14
 df4:	90 e0       	ldi	r25, 0x00	; 0
 df6:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 dfa:	a1 10       	cpse	r10, r1
 dfc:	f5 cf       	rjmp	.-22     	; 0xde8 <vfprintf+0x366>
 dfe:	33 20       	and	r3, r3
 e00:	09 f4       	brne	.+2      	; 0xe04 <vfprintf+0x382>
 e02:	51 ce       	rjmp	.-862    	; 0xaa6 <vfprintf+0x24>
 e04:	b7 01       	movw	r22, r14
 e06:	80 e2       	ldi	r24, 0x20	; 32
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 e0e:	3a 94       	dec	r3
 e10:	f6 cf       	rjmp	.-20     	; 0xdfe <vfprintf+0x37c>
 e12:	f7 01       	movw	r30, r14
 e14:	86 81       	ldd	r24, Z+6	; 0x06
 e16:	97 81       	ldd	r25, Z+7	; 0x07
 e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x39c>
 e1a:	8f ef       	ldi	r24, 0xFF	; 255
 e1c:	9f ef       	ldi	r25, 0xFF	; 255
 e1e:	2c 96       	adiw	r28, 0x0c	; 12
 e20:	e2 e1       	ldi	r30, 0x12	; 18
 e22:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__epilogue_restores__>

00000e26 <strnlen_P>:
 e26:	fc 01       	movw	r30, r24
 e28:	05 90       	lpm	r0, Z+
 e2a:	61 50       	subi	r22, 0x01	; 1
 e2c:	70 40       	sbci	r23, 0x00	; 0
 e2e:	01 10       	cpse	r0, r1
 e30:	d8 f7       	brcc	.-10     	; 0xe28 <strnlen_P+0x2>
 e32:	80 95       	com	r24
 e34:	90 95       	com	r25
 e36:	8e 0f       	add	r24, r30
 e38:	9f 1f       	adc	r25, r31
 e3a:	08 95       	ret

00000e3c <strnlen>:
 e3c:	fc 01       	movw	r30, r24
 e3e:	61 50       	subi	r22, 0x01	; 1
 e40:	70 40       	sbci	r23, 0x00	; 0
 e42:	01 90       	ld	r0, Z+
 e44:	01 10       	cpse	r0, r1
 e46:	d8 f7       	brcc	.-10     	; 0xe3e <strnlen+0x2>
 e48:	80 95       	com	r24
 e4a:	90 95       	com	r25
 e4c:	8e 0f       	add	r24, r30
 e4e:	9f 1f       	adc	r25, r31
 e50:	08 95       	ret

00000e52 <fputc>:
 e52:	0f 93       	push	r16
 e54:	1f 93       	push	r17
 e56:	cf 93       	push	r28
 e58:	df 93       	push	r29
 e5a:	fb 01       	movw	r30, r22
 e5c:	23 81       	ldd	r18, Z+3	; 0x03
 e5e:	21 fd       	sbrc	r18, 1
 e60:	03 c0       	rjmp	.+6      	; 0xe68 <fputc+0x16>
 e62:	8f ef       	ldi	r24, 0xFF	; 255
 e64:	9f ef       	ldi	r25, 0xFF	; 255
 e66:	28 c0       	rjmp	.+80     	; 0xeb8 <fputc+0x66>
 e68:	22 ff       	sbrs	r18, 2
 e6a:	16 c0       	rjmp	.+44     	; 0xe98 <fputc+0x46>
 e6c:	46 81       	ldd	r20, Z+6	; 0x06
 e6e:	57 81       	ldd	r21, Z+7	; 0x07
 e70:	24 81       	ldd	r18, Z+4	; 0x04
 e72:	35 81       	ldd	r19, Z+5	; 0x05
 e74:	42 17       	cp	r20, r18
 e76:	53 07       	cpc	r21, r19
 e78:	44 f4       	brge	.+16     	; 0xe8a <fputc+0x38>
 e7a:	a0 81       	ld	r26, Z
 e7c:	b1 81       	ldd	r27, Z+1	; 0x01
 e7e:	9d 01       	movw	r18, r26
 e80:	2f 5f       	subi	r18, 0xFF	; 255
 e82:	3f 4f       	sbci	r19, 0xFF	; 255
 e84:	31 83       	std	Z+1, r19	; 0x01
 e86:	20 83       	st	Z, r18
 e88:	8c 93       	st	X, r24
 e8a:	26 81       	ldd	r18, Z+6	; 0x06
 e8c:	37 81       	ldd	r19, Z+7	; 0x07
 e8e:	2f 5f       	subi	r18, 0xFF	; 255
 e90:	3f 4f       	sbci	r19, 0xFF	; 255
 e92:	37 83       	std	Z+7, r19	; 0x07
 e94:	26 83       	std	Z+6, r18	; 0x06
 e96:	10 c0       	rjmp	.+32     	; 0xeb8 <fputc+0x66>
 e98:	eb 01       	movw	r28, r22
 e9a:	09 2f       	mov	r16, r25
 e9c:	18 2f       	mov	r17, r24
 e9e:	00 84       	ldd	r0, Z+8	; 0x08
 ea0:	f1 85       	ldd	r31, Z+9	; 0x09
 ea2:	e0 2d       	mov	r30, r0
 ea4:	09 95       	icall
 ea6:	89 2b       	or	r24, r25
 ea8:	e1 f6       	brne	.-72     	; 0xe62 <fputc+0x10>
 eaa:	8e 81       	ldd	r24, Y+6	; 0x06
 eac:	9f 81       	ldd	r25, Y+7	; 0x07
 eae:	01 96       	adiw	r24, 0x01	; 1
 eb0:	9f 83       	std	Y+7, r25	; 0x07
 eb2:	8e 83       	std	Y+6, r24	; 0x06
 eb4:	81 2f       	mov	r24, r17
 eb6:	90 2f       	mov	r25, r16
 eb8:	df 91       	pop	r29
 eba:	cf 91       	pop	r28
 ebc:	1f 91       	pop	r17
 ebe:	0f 91       	pop	r16
 ec0:	08 95       	ret

00000ec2 <__ultoa_invert>:
 ec2:	fa 01       	movw	r30, r20
 ec4:	aa 27       	eor	r26, r26
 ec6:	28 30       	cpi	r18, 0x08	; 8
 ec8:	51 f1       	breq	.+84     	; 0xf1e <__ultoa_invert+0x5c>
 eca:	20 31       	cpi	r18, 0x10	; 16
 ecc:	81 f1       	breq	.+96     	; 0xf2e <__ultoa_invert+0x6c>
 ece:	e8 94       	clt
 ed0:	6f 93       	push	r22
 ed2:	6e 7f       	andi	r22, 0xFE	; 254
 ed4:	6e 5f       	subi	r22, 0xFE	; 254
 ed6:	7f 4f       	sbci	r23, 0xFF	; 255
 ed8:	8f 4f       	sbci	r24, 0xFF	; 255
 eda:	9f 4f       	sbci	r25, 0xFF	; 255
 edc:	af 4f       	sbci	r26, 0xFF	; 255
 ede:	b1 e0       	ldi	r27, 0x01	; 1
 ee0:	3e d0       	rcall	.+124    	; 0xf5e <__ultoa_invert+0x9c>
 ee2:	b4 e0       	ldi	r27, 0x04	; 4
 ee4:	3c d0       	rcall	.+120    	; 0xf5e <__ultoa_invert+0x9c>
 ee6:	67 0f       	add	r22, r23
 ee8:	78 1f       	adc	r23, r24
 eea:	89 1f       	adc	r24, r25
 eec:	9a 1f       	adc	r25, r26
 eee:	a1 1d       	adc	r26, r1
 ef0:	68 0f       	add	r22, r24
 ef2:	79 1f       	adc	r23, r25
 ef4:	8a 1f       	adc	r24, r26
 ef6:	91 1d       	adc	r25, r1
 ef8:	a1 1d       	adc	r26, r1
 efa:	6a 0f       	add	r22, r26
 efc:	71 1d       	adc	r23, r1
 efe:	81 1d       	adc	r24, r1
 f00:	91 1d       	adc	r25, r1
 f02:	a1 1d       	adc	r26, r1
 f04:	20 d0       	rcall	.+64     	; 0xf46 <__ultoa_invert+0x84>
 f06:	09 f4       	brne	.+2      	; 0xf0a <__ultoa_invert+0x48>
 f08:	68 94       	set
 f0a:	3f 91       	pop	r19
 f0c:	2a e0       	ldi	r18, 0x0A	; 10
 f0e:	26 9f       	mul	r18, r22
 f10:	11 24       	eor	r1, r1
 f12:	30 19       	sub	r19, r0
 f14:	30 5d       	subi	r19, 0xD0	; 208
 f16:	31 93       	st	Z+, r19
 f18:	de f6       	brtc	.-74     	; 0xed0 <__ultoa_invert+0xe>
 f1a:	cf 01       	movw	r24, r30
 f1c:	08 95       	ret
 f1e:	46 2f       	mov	r20, r22
 f20:	47 70       	andi	r20, 0x07	; 7
 f22:	40 5d       	subi	r20, 0xD0	; 208
 f24:	41 93       	st	Z+, r20
 f26:	b3 e0       	ldi	r27, 0x03	; 3
 f28:	0f d0       	rcall	.+30     	; 0xf48 <__ultoa_invert+0x86>
 f2a:	c9 f7       	brne	.-14     	; 0xf1e <__ultoa_invert+0x5c>
 f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <__ultoa_invert+0x58>
 f2e:	46 2f       	mov	r20, r22
 f30:	4f 70       	andi	r20, 0x0F	; 15
 f32:	40 5d       	subi	r20, 0xD0	; 208
 f34:	4a 33       	cpi	r20, 0x3A	; 58
 f36:	18 f0       	brcs	.+6      	; 0xf3e <__ultoa_invert+0x7c>
 f38:	49 5d       	subi	r20, 0xD9	; 217
 f3a:	31 fd       	sbrc	r19, 1
 f3c:	40 52       	subi	r20, 0x20	; 32
 f3e:	41 93       	st	Z+, r20
 f40:	02 d0       	rcall	.+4      	; 0xf46 <__ultoa_invert+0x84>
 f42:	a9 f7       	brne	.-22     	; 0xf2e <__ultoa_invert+0x6c>
 f44:	ea cf       	rjmp	.-44     	; 0xf1a <__ultoa_invert+0x58>
 f46:	b4 e0       	ldi	r27, 0x04	; 4
 f48:	a6 95       	lsr	r26
 f4a:	97 95       	ror	r25
 f4c:	87 95       	ror	r24
 f4e:	77 95       	ror	r23
 f50:	67 95       	ror	r22
 f52:	ba 95       	dec	r27
 f54:	c9 f7       	brne	.-14     	; 0xf48 <__ultoa_invert+0x86>
 f56:	00 97       	sbiw	r24, 0x00	; 0
 f58:	61 05       	cpc	r22, r1
 f5a:	71 05       	cpc	r23, r1
 f5c:	08 95       	ret
 f5e:	9b 01       	movw	r18, r22
 f60:	ac 01       	movw	r20, r24
 f62:	0a 2e       	mov	r0, r26
 f64:	06 94       	lsr	r0
 f66:	57 95       	ror	r21
 f68:	47 95       	ror	r20
 f6a:	37 95       	ror	r19
 f6c:	27 95       	ror	r18
 f6e:	ba 95       	dec	r27
 f70:	c9 f7       	brne	.-14     	; 0xf64 <__ultoa_invert+0xa2>
 f72:	62 0f       	add	r22, r18
 f74:	73 1f       	adc	r23, r19
 f76:	84 1f       	adc	r24, r20
 f78:	95 1f       	adc	r25, r21
 f7a:	a0 1d       	adc	r26, r0
 f7c:	08 95       	ret

00000f7e <__prologue_saves__>:
 f7e:	2f 92       	push	r2
 f80:	3f 92       	push	r3
 f82:	4f 92       	push	r4
 f84:	5f 92       	push	r5
 f86:	6f 92       	push	r6
 f88:	7f 92       	push	r7
 f8a:	8f 92       	push	r8
 f8c:	9f 92       	push	r9
 f8e:	af 92       	push	r10
 f90:	bf 92       	push	r11
 f92:	cf 92       	push	r12
 f94:	df 92       	push	r13
 f96:	ef 92       	push	r14
 f98:	ff 92       	push	r15
 f9a:	0f 93       	push	r16
 f9c:	1f 93       	push	r17
 f9e:	cf 93       	push	r28
 fa0:	df 93       	push	r29
 fa2:	cd b7       	in	r28, 0x3d	; 61
 fa4:	de b7       	in	r29, 0x3e	; 62
 fa6:	ca 1b       	sub	r28, r26
 fa8:	db 0b       	sbc	r29, r27
 faa:	0f b6       	in	r0, 0x3f	; 63
 fac:	f8 94       	cli
 fae:	de bf       	out	0x3e, r29	; 62
 fb0:	0f be       	out	0x3f, r0	; 63
 fb2:	cd bf       	out	0x3d, r28	; 61
 fb4:	09 94       	ijmp

00000fb6 <__epilogue_restores__>:
 fb6:	2a 88       	ldd	r2, Y+18	; 0x12
 fb8:	39 88       	ldd	r3, Y+17	; 0x11
 fba:	48 88       	ldd	r4, Y+16	; 0x10
 fbc:	5f 84       	ldd	r5, Y+15	; 0x0f
 fbe:	6e 84       	ldd	r6, Y+14	; 0x0e
 fc0:	7d 84       	ldd	r7, Y+13	; 0x0d
 fc2:	8c 84       	ldd	r8, Y+12	; 0x0c
 fc4:	9b 84       	ldd	r9, Y+11	; 0x0b
 fc6:	aa 84       	ldd	r10, Y+10	; 0x0a
 fc8:	b9 84       	ldd	r11, Y+9	; 0x09
 fca:	c8 84       	ldd	r12, Y+8	; 0x08
 fcc:	df 80       	ldd	r13, Y+7	; 0x07
 fce:	ee 80       	ldd	r14, Y+6	; 0x06
 fd0:	fd 80       	ldd	r15, Y+5	; 0x05
 fd2:	0c 81       	ldd	r16, Y+4	; 0x04
 fd4:	1b 81       	ldd	r17, Y+3	; 0x03
 fd6:	aa 81       	ldd	r26, Y+2	; 0x02
 fd8:	b9 81       	ldd	r27, Y+1	; 0x01
 fda:	ce 0f       	add	r28, r30
 fdc:	d1 1d       	adc	r29, r1
 fde:	0f b6       	in	r0, 0x3f	; 63
 fe0:	f8 94       	cli
 fe2:	de bf       	out	0x3e, r29	; 62
 fe4:	0f be       	out	0x3f, r0	; 63
 fe6:	cd bf       	out	0x3d, r28	; 61
 fe8:	ed 01       	movw	r28, r26
 fea:	08 95       	ret

00000fec <_exit>:
 fec:	f8 94       	cli

00000fee <__stop_program>:
 fee:	ff cf       	rjmp	.-2      	; 0xfee <__stop_program>
